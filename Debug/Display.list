
Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021d8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00008ae4  080022e4  080022e4  000122e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800adc8  0800adc8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800adc8  0800adc8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800adc8  0800adc8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800adc8  0800adc8  0001adc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800adcc  0800adcc  0001adcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800add0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003b68  2000000c  0800addc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003b74  0800addc  00023b74  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000061f6  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000012c7  00000000  00000000  0002622b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000638  00000000  00000000  000274f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000590  00000000  00000000  00027b30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001317a  00000000  00000000  000280c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005691  00000000  00000000  0003b23a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00068d9a  00000000  00000000  000408cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a9665  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017dc  00000000  00000000  000a96e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080022cc 	.word	0x080022cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080022cc 	.word	0x080022cc

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000164:	4b08      	ldr	r3, [pc, #32]	; (8000188 <HAL_Init+0x28>)
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	4a07      	ldr	r2, [pc, #28]	; (8000188 <HAL_Init+0x28>)
 800016a:	f043 0310 	orr.w	r3, r3, #16
 800016e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000170:	2003      	movs	r0, #3
 8000172:	f000 f929 	bl	80003c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000176:	2000      	movs	r0, #0
 8000178:	f000 f808 	bl	800018c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800017c:	f001 ff3e 	bl	8001ffc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000180:	2300      	movs	r3, #0
}
 8000182:	4618      	mov	r0, r3
 8000184:	bd80      	pop	{r7, pc}
 8000186:	bf00      	nop
 8000188:	40022000 	.word	0x40022000

0800018c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b082      	sub	sp, #8
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000194:	4b12      	ldr	r3, [pc, #72]	; (80001e0 <HAL_InitTick+0x54>)
 8000196:	681a      	ldr	r2, [r3, #0]
 8000198:	4b12      	ldr	r3, [pc, #72]	; (80001e4 <HAL_InitTick+0x58>)
 800019a:	781b      	ldrb	r3, [r3, #0]
 800019c:	4619      	mov	r1, r3
 800019e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80001a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80001aa:	4618      	mov	r0, r3
 80001ac:	f000 f933 	bl	8000416 <HAL_SYSTICK_Config>
 80001b0:	4603      	mov	r3, r0
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d001      	beq.n	80001ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001b6:	2301      	movs	r3, #1
 80001b8:	e00e      	b.n	80001d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	2b0f      	cmp	r3, #15
 80001be:	d80a      	bhi.n	80001d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001c0:	2200      	movs	r2, #0
 80001c2:	6879      	ldr	r1, [r7, #4]
 80001c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001c8:	f000 f909 	bl	80003de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001cc:	4a06      	ldr	r2, [pc, #24]	; (80001e8 <HAL_InitTick+0x5c>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001d2:	2300      	movs	r3, #0
 80001d4:	e000      	b.n	80001d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001d6:	2301      	movs	r3, #1
}
 80001d8:	4618      	mov	r0, r3
 80001da:	3708      	adds	r7, #8
 80001dc:	46bd      	mov	sp, r7
 80001de:	bd80      	pop	{r7, pc}
 80001e0:	20000008 	.word	0x20000008
 80001e4:	20000004 	.word	0x20000004
 80001e8:	20000000 	.word	0x20000000

080001ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001f0:	4b05      	ldr	r3, [pc, #20]	; (8000208 <HAL_IncTick+0x1c>)
 80001f2:	781b      	ldrb	r3, [r3, #0]
 80001f4:	461a      	mov	r2, r3
 80001f6:	4b05      	ldr	r3, [pc, #20]	; (800020c <HAL_IncTick+0x20>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	4413      	add	r3, r2
 80001fc:	4a03      	ldr	r2, [pc, #12]	; (800020c <HAL_IncTick+0x20>)
 80001fe:	6013      	str	r3, [r2, #0]
}
 8000200:	bf00      	nop
 8000202:	46bd      	mov	sp, r7
 8000204:	bc80      	pop	{r7}
 8000206:	4770      	bx	lr
 8000208:	20000004 	.word	0x20000004
 800020c:	20000028 	.word	0x20000028

08000210 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0
  return uwTick;
 8000214:	4b02      	ldr	r3, [pc, #8]	; (8000220 <HAL_GetTick+0x10>)
 8000216:	681b      	ldr	r3, [r3, #0]
}
 8000218:	4618      	mov	r0, r3
 800021a:	46bd      	mov	sp, r7
 800021c:	bc80      	pop	{r7}
 800021e:	4770      	bx	lr
 8000220:	20000028 	.word	0x20000028

08000224 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800022c:	f7ff fff0 	bl	8000210 <HAL_GetTick>
 8000230:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800023c:	d005      	beq.n	800024a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800023e:	4b09      	ldr	r3, [pc, #36]	; (8000264 <HAL_Delay+0x40>)
 8000240:	781b      	ldrb	r3, [r3, #0]
 8000242:	461a      	mov	r2, r3
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	4413      	add	r3, r2
 8000248:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800024a:	bf00      	nop
 800024c:	f7ff ffe0 	bl	8000210 <HAL_GetTick>
 8000250:	4602      	mov	r2, r0
 8000252:	68bb      	ldr	r3, [r7, #8]
 8000254:	1ad3      	subs	r3, r2, r3
 8000256:	68fa      	ldr	r2, [r7, #12]
 8000258:	429a      	cmp	r2, r3
 800025a:	d8f7      	bhi.n	800024c <HAL_Delay+0x28>
  {
  }
}
 800025c:	bf00      	nop
 800025e:	3710      	adds	r7, #16
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	20000004 	.word	0x20000004

08000268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000268:	b480      	push	{r7}
 800026a:	b085      	sub	sp, #20
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	f003 0307 	and.w	r3, r3, #7
 8000276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000278:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <__NVIC_SetPriorityGrouping+0x44>)
 800027a:	68db      	ldr	r3, [r3, #12]
 800027c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800027e:	68ba      	ldr	r2, [r7, #8]
 8000280:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000284:	4013      	ands	r3, r2
 8000286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800028c:	68bb      	ldr	r3, [r7, #8]
 800028e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000290:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800029a:	4a04      	ldr	r2, [pc, #16]	; (80002ac <__NVIC_SetPriorityGrouping+0x44>)
 800029c:	68bb      	ldr	r3, [r7, #8]
 800029e:	60d3      	str	r3, [r2, #12]
}
 80002a0:	bf00      	nop
 80002a2:	3714      	adds	r7, #20
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bc80      	pop	{r7}
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	e000ed00 	.word	0xe000ed00

080002b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__NVIC_GetPriorityGrouping+0x18>)
 80002b6:	68db      	ldr	r3, [r3, #12]
 80002b8:	0a1b      	lsrs	r3, r3, #8
 80002ba:	f003 0307 	and.w	r3, r3, #7
}
 80002be:	4618      	mov	r0, r3
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bc80      	pop	{r7}
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	e000ed00 	.word	0xe000ed00

080002cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	4603      	mov	r3, r0
 80002d4:	6039      	str	r1, [r7, #0]
 80002d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	db0a      	blt.n	80002f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e0:	683b      	ldr	r3, [r7, #0]
 80002e2:	b2da      	uxtb	r2, r3
 80002e4:	490c      	ldr	r1, [pc, #48]	; (8000318 <__NVIC_SetPriority+0x4c>)
 80002e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ea:	0112      	lsls	r2, r2, #4
 80002ec:	b2d2      	uxtb	r2, r2
 80002ee:	440b      	add	r3, r1
 80002f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002f4:	e00a      	b.n	800030c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	b2da      	uxtb	r2, r3
 80002fa:	4908      	ldr	r1, [pc, #32]	; (800031c <__NVIC_SetPriority+0x50>)
 80002fc:	79fb      	ldrb	r3, [r7, #7]
 80002fe:	f003 030f 	and.w	r3, r3, #15
 8000302:	3b04      	subs	r3, #4
 8000304:	0112      	lsls	r2, r2, #4
 8000306:	b2d2      	uxtb	r2, r2
 8000308:	440b      	add	r3, r1
 800030a:	761a      	strb	r2, [r3, #24]
}
 800030c:	bf00      	nop
 800030e:	370c      	adds	r7, #12
 8000310:	46bd      	mov	sp, r7
 8000312:	bc80      	pop	{r7}
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	e000e100 	.word	0xe000e100
 800031c:	e000ed00 	.word	0xe000ed00

08000320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000320:	b480      	push	{r7}
 8000322:	b089      	sub	sp, #36	; 0x24
 8000324:	af00      	add	r7, sp, #0
 8000326:	60f8      	str	r0, [r7, #12]
 8000328:	60b9      	str	r1, [r7, #8]
 800032a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	f003 0307 	and.w	r3, r3, #7
 8000332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000334:	69fb      	ldr	r3, [r7, #28]
 8000336:	f1c3 0307 	rsb	r3, r3, #7
 800033a:	2b04      	cmp	r3, #4
 800033c:	bf28      	it	cs
 800033e:	2304      	movcs	r3, #4
 8000340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000342:	69fb      	ldr	r3, [r7, #28]
 8000344:	3304      	adds	r3, #4
 8000346:	2b06      	cmp	r3, #6
 8000348:	d902      	bls.n	8000350 <NVIC_EncodePriority+0x30>
 800034a:	69fb      	ldr	r3, [r7, #28]
 800034c:	3b03      	subs	r3, #3
 800034e:	e000      	b.n	8000352 <NVIC_EncodePriority+0x32>
 8000350:	2300      	movs	r3, #0
 8000352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000354:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000358:	69bb      	ldr	r3, [r7, #24]
 800035a:	fa02 f303 	lsl.w	r3, r2, r3
 800035e:	43da      	mvns	r2, r3
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	401a      	ands	r2, r3
 8000364:	697b      	ldr	r3, [r7, #20]
 8000366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000368:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800036c:	697b      	ldr	r3, [r7, #20]
 800036e:	fa01 f303 	lsl.w	r3, r1, r3
 8000372:	43d9      	mvns	r1, r3
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000378:	4313      	orrs	r3, r2
         );
}
 800037a:	4618      	mov	r0, r3
 800037c:	3724      	adds	r7, #36	; 0x24
 800037e:	46bd      	mov	sp, r7
 8000380:	bc80      	pop	{r7}
 8000382:	4770      	bx	lr

08000384 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	3b01      	subs	r3, #1
 8000390:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000394:	d301      	bcc.n	800039a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000396:	2301      	movs	r3, #1
 8000398:	e00f      	b.n	80003ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800039a:	4a0a      	ldr	r2, [pc, #40]	; (80003c4 <SysTick_Config+0x40>)
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	3b01      	subs	r3, #1
 80003a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003a2:	210f      	movs	r1, #15
 80003a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80003a8:	f7ff ff90 	bl	80002cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003ac:	4b05      	ldr	r3, [pc, #20]	; (80003c4 <SysTick_Config+0x40>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003b2:	4b04      	ldr	r3, [pc, #16]	; (80003c4 <SysTick_Config+0x40>)
 80003b4:	2207      	movs	r2, #7
 80003b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003b8:	2300      	movs	r3, #0
}
 80003ba:	4618      	mov	r0, r3
 80003bc:	3708      	adds	r7, #8
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	e000e010 	.word	0xe000e010

080003c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003d0:	6878      	ldr	r0, [r7, #4]
 80003d2:	f7ff ff49 	bl	8000268 <__NVIC_SetPriorityGrouping>
}
 80003d6:	bf00      	nop
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}

080003de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003de:	b580      	push	{r7, lr}
 80003e0:	b086      	sub	sp, #24
 80003e2:	af00      	add	r7, sp, #0
 80003e4:	4603      	mov	r3, r0
 80003e6:	60b9      	str	r1, [r7, #8]
 80003e8:	607a      	str	r2, [r7, #4]
 80003ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003ec:	2300      	movs	r3, #0
 80003ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003f0:	f7ff ff5e 	bl	80002b0 <__NVIC_GetPriorityGrouping>
 80003f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003f6:	687a      	ldr	r2, [r7, #4]
 80003f8:	68b9      	ldr	r1, [r7, #8]
 80003fa:	6978      	ldr	r0, [r7, #20]
 80003fc:	f7ff ff90 	bl	8000320 <NVIC_EncodePriority>
 8000400:	4602      	mov	r2, r0
 8000402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000406:	4611      	mov	r1, r2
 8000408:	4618      	mov	r0, r3
 800040a:	f7ff ff5f 	bl	80002cc <__NVIC_SetPriority>
}
 800040e:	bf00      	nop
 8000410:	3718      	adds	r7, #24
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}

08000416 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000416:	b580      	push	{r7, lr}
 8000418:	b082      	sub	sp, #8
 800041a:	af00      	add	r7, sp, #0
 800041c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800041e:	6878      	ldr	r0, [r7, #4]
 8000420:	f7ff ffb0 	bl	8000384 <SysTick_Config>
 8000424:	4603      	mov	r3, r0
}
 8000426:	4618      	mov	r0, r3
 8000428:	3708      	adds	r7, #8
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
	...

08000430 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000430:	b480      	push	{r7}
 8000432:	b08b      	sub	sp, #44	; 0x2c
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
 8000438:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800043a:	2300      	movs	r3, #0
 800043c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800043e:	2300      	movs	r3, #0
 8000440:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000442:	e127      	b.n	8000694 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000444:	2201      	movs	r2, #1
 8000446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000448:	fa02 f303 	lsl.w	r3, r2, r3
 800044c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	69fa      	ldr	r2, [r7, #28]
 8000454:	4013      	ands	r3, r2
 8000456:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000458:	69ba      	ldr	r2, [r7, #24]
 800045a:	69fb      	ldr	r3, [r7, #28]
 800045c:	429a      	cmp	r2, r3
 800045e:	f040 8116 	bne.w	800068e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000462:	683b      	ldr	r3, [r7, #0]
 8000464:	685b      	ldr	r3, [r3, #4]
 8000466:	2b12      	cmp	r3, #18
 8000468:	d034      	beq.n	80004d4 <HAL_GPIO_Init+0xa4>
 800046a:	2b12      	cmp	r3, #18
 800046c:	d80d      	bhi.n	800048a <HAL_GPIO_Init+0x5a>
 800046e:	2b02      	cmp	r3, #2
 8000470:	d02b      	beq.n	80004ca <HAL_GPIO_Init+0x9a>
 8000472:	2b02      	cmp	r3, #2
 8000474:	d804      	bhi.n	8000480 <HAL_GPIO_Init+0x50>
 8000476:	2b00      	cmp	r3, #0
 8000478:	d031      	beq.n	80004de <HAL_GPIO_Init+0xae>
 800047a:	2b01      	cmp	r3, #1
 800047c:	d01c      	beq.n	80004b8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800047e:	e048      	b.n	8000512 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000480:	2b03      	cmp	r3, #3
 8000482:	d043      	beq.n	800050c <HAL_GPIO_Init+0xdc>
 8000484:	2b11      	cmp	r3, #17
 8000486:	d01b      	beq.n	80004c0 <HAL_GPIO_Init+0x90>
          break;
 8000488:	e043      	b.n	8000512 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800048a:	4a89      	ldr	r2, [pc, #548]	; (80006b0 <HAL_GPIO_Init+0x280>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d026      	beq.n	80004de <HAL_GPIO_Init+0xae>
 8000490:	4a87      	ldr	r2, [pc, #540]	; (80006b0 <HAL_GPIO_Init+0x280>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d806      	bhi.n	80004a4 <HAL_GPIO_Init+0x74>
 8000496:	4a87      	ldr	r2, [pc, #540]	; (80006b4 <HAL_GPIO_Init+0x284>)
 8000498:	4293      	cmp	r3, r2
 800049a:	d020      	beq.n	80004de <HAL_GPIO_Init+0xae>
 800049c:	4a86      	ldr	r2, [pc, #536]	; (80006b8 <HAL_GPIO_Init+0x288>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d01d      	beq.n	80004de <HAL_GPIO_Init+0xae>
          break;
 80004a2:	e036      	b.n	8000512 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004a4:	4a85      	ldr	r2, [pc, #532]	; (80006bc <HAL_GPIO_Init+0x28c>)
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d019      	beq.n	80004de <HAL_GPIO_Init+0xae>
 80004aa:	4a85      	ldr	r2, [pc, #532]	; (80006c0 <HAL_GPIO_Init+0x290>)
 80004ac:	4293      	cmp	r3, r2
 80004ae:	d016      	beq.n	80004de <HAL_GPIO_Init+0xae>
 80004b0:	4a84      	ldr	r2, [pc, #528]	; (80006c4 <HAL_GPIO_Init+0x294>)
 80004b2:	4293      	cmp	r3, r2
 80004b4:	d013      	beq.n	80004de <HAL_GPIO_Init+0xae>
          break;
 80004b6:	e02c      	b.n	8000512 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	68db      	ldr	r3, [r3, #12]
 80004bc:	623b      	str	r3, [r7, #32]
          break;
 80004be:	e028      	b.n	8000512 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	68db      	ldr	r3, [r3, #12]
 80004c4:	3304      	adds	r3, #4
 80004c6:	623b      	str	r3, [r7, #32]
          break;
 80004c8:	e023      	b.n	8000512 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	68db      	ldr	r3, [r3, #12]
 80004ce:	3308      	adds	r3, #8
 80004d0:	623b      	str	r3, [r7, #32]
          break;
 80004d2:	e01e      	b.n	8000512 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	68db      	ldr	r3, [r3, #12]
 80004d8:	330c      	adds	r3, #12
 80004da:	623b      	str	r3, [r7, #32]
          break;
 80004dc:	e019      	b.n	8000512 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	689b      	ldr	r3, [r3, #8]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d102      	bne.n	80004ec <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80004e6:	2304      	movs	r3, #4
 80004e8:	623b      	str	r3, [r7, #32]
          break;
 80004ea:	e012      	b.n	8000512 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	689b      	ldr	r3, [r3, #8]
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d105      	bne.n	8000500 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004f4:	2308      	movs	r3, #8
 80004f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	69fa      	ldr	r2, [r7, #28]
 80004fc:	611a      	str	r2, [r3, #16]
          break;
 80004fe:	e008      	b.n	8000512 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000500:	2308      	movs	r3, #8
 8000502:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	69fa      	ldr	r2, [r7, #28]
 8000508:	615a      	str	r2, [r3, #20]
          break;
 800050a:	e002      	b.n	8000512 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800050c:	2300      	movs	r3, #0
 800050e:	623b      	str	r3, [r7, #32]
          break;
 8000510:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000512:	69bb      	ldr	r3, [r7, #24]
 8000514:	2bff      	cmp	r3, #255	; 0xff
 8000516:	d801      	bhi.n	800051c <HAL_GPIO_Init+0xec>
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	e001      	b.n	8000520 <HAL_GPIO_Init+0xf0>
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	3304      	adds	r3, #4
 8000520:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000522:	69bb      	ldr	r3, [r7, #24]
 8000524:	2bff      	cmp	r3, #255	; 0xff
 8000526:	d802      	bhi.n	800052e <HAL_GPIO_Init+0xfe>
 8000528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800052a:	009b      	lsls	r3, r3, #2
 800052c:	e002      	b.n	8000534 <HAL_GPIO_Init+0x104>
 800052e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000530:	3b08      	subs	r3, #8
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	681a      	ldr	r2, [r3, #0]
 800053a:	210f      	movs	r1, #15
 800053c:	693b      	ldr	r3, [r7, #16]
 800053e:	fa01 f303 	lsl.w	r3, r1, r3
 8000542:	43db      	mvns	r3, r3
 8000544:	401a      	ands	r2, r3
 8000546:	6a39      	ldr	r1, [r7, #32]
 8000548:	693b      	ldr	r3, [r7, #16]
 800054a:	fa01 f303 	lsl.w	r3, r1, r3
 800054e:	431a      	orrs	r2, r3
 8000550:	697b      	ldr	r3, [r7, #20]
 8000552:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	685b      	ldr	r3, [r3, #4]
 8000558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055c:	2b00      	cmp	r3, #0
 800055e:	f000 8096 	beq.w	800068e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000562:	4b59      	ldr	r3, [pc, #356]	; (80006c8 <HAL_GPIO_Init+0x298>)
 8000564:	699b      	ldr	r3, [r3, #24]
 8000566:	4a58      	ldr	r2, [pc, #352]	; (80006c8 <HAL_GPIO_Init+0x298>)
 8000568:	f043 0301 	orr.w	r3, r3, #1
 800056c:	6193      	str	r3, [r2, #24]
 800056e:	4b56      	ldr	r3, [pc, #344]	; (80006c8 <HAL_GPIO_Init+0x298>)
 8000570:	699b      	ldr	r3, [r3, #24]
 8000572:	f003 0301 	and.w	r3, r3, #1
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800057a:	4a54      	ldr	r2, [pc, #336]	; (80006cc <HAL_GPIO_Init+0x29c>)
 800057c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800057e:	089b      	lsrs	r3, r3, #2
 8000580:	3302      	adds	r3, #2
 8000582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000586:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800058a:	f003 0303 	and.w	r3, r3, #3
 800058e:	009b      	lsls	r3, r3, #2
 8000590:	220f      	movs	r2, #15
 8000592:	fa02 f303 	lsl.w	r3, r2, r3
 8000596:	43db      	mvns	r3, r3
 8000598:	68fa      	ldr	r2, [r7, #12]
 800059a:	4013      	ands	r3, r2
 800059c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4a4b      	ldr	r2, [pc, #300]	; (80006d0 <HAL_GPIO_Init+0x2a0>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d013      	beq.n	80005ce <HAL_GPIO_Init+0x19e>
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4a4a      	ldr	r2, [pc, #296]	; (80006d4 <HAL_GPIO_Init+0x2a4>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d00d      	beq.n	80005ca <HAL_GPIO_Init+0x19a>
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4a49      	ldr	r2, [pc, #292]	; (80006d8 <HAL_GPIO_Init+0x2a8>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d007      	beq.n	80005c6 <HAL_GPIO_Init+0x196>
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4a48      	ldr	r2, [pc, #288]	; (80006dc <HAL_GPIO_Init+0x2ac>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d101      	bne.n	80005c2 <HAL_GPIO_Init+0x192>
 80005be:	2303      	movs	r3, #3
 80005c0:	e006      	b.n	80005d0 <HAL_GPIO_Init+0x1a0>
 80005c2:	2304      	movs	r3, #4
 80005c4:	e004      	b.n	80005d0 <HAL_GPIO_Init+0x1a0>
 80005c6:	2302      	movs	r3, #2
 80005c8:	e002      	b.n	80005d0 <HAL_GPIO_Init+0x1a0>
 80005ca:	2301      	movs	r3, #1
 80005cc:	e000      	b.n	80005d0 <HAL_GPIO_Init+0x1a0>
 80005ce:	2300      	movs	r3, #0
 80005d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005d2:	f002 0203 	and.w	r2, r2, #3
 80005d6:	0092      	lsls	r2, r2, #2
 80005d8:	4093      	lsls	r3, r2
 80005da:	68fa      	ldr	r2, [r7, #12]
 80005dc:	4313      	orrs	r3, r2
 80005de:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80005e0:	493a      	ldr	r1, [pc, #232]	; (80006cc <HAL_GPIO_Init+0x29c>)
 80005e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005e4:	089b      	lsrs	r3, r3, #2
 80005e6:	3302      	adds	r3, #2
 80005e8:	68fa      	ldr	r2, [r7, #12]
 80005ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	685b      	ldr	r3, [r3, #4]
 80005f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d006      	beq.n	8000608 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80005fa:	4b39      	ldr	r3, [pc, #228]	; (80006e0 <HAL_GPIO_Init+0x2b0>)
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	4938      	ldr	r1, [pc, #224]	; (80006e0 <HAL_GPIO_Init+0x2b0>)
 8000600:	69bb      	ldr	r3, [r7, #24]
 8000602:	4313      	orrs	r3, r2
 8000604:	600b      	str	r3, [r1, #0]
 8000606:	e006      	b.n	8000616 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000608:	4b35      	ldr	r3, [pc, #212]	; (80006e0 <HAL_GPIO_Init+0x2b0>)
 800060a:	681a      	ldr	r2, [r3, #0]
 800060c:	69bb      	ldr	r3, [r7, #24]
 800060e:	43db      	mvns	r3, r3
 8000610:	4933      	ldr	r1, [pc, #204]	; (80006e0 <HAL_GPIO_Init+0x2b0>)
 8000612:	4013      	ands	r3, r2
 8000614:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	685b      	ldr	r3, [r3, #4]
 800061a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800061e:	2b00      	cmp	r3, #0
 8000620:	d006      	beq.n	8000630 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000622:	4b2f      	ldr	r3, [pc, #188]	; (80006e0 <HAL_GPIO_Init+0x2b0>)
 8000624:	685a      	ldr	r2, [r3, #4]
 8000626:	492e      	ldr	r1, [pc, #184]	; (80006e0 <HAL_GPIO_Init+0x2b0>)
 8000628:	69bb      	ldr	r3, [r7, #24]
 800062a:	4313      	orrs	r3, r2
 800062c:	604b      	str	r3, [r1, #4]
 800062e:	e006      	b.n	800063e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000630:	4b2b      	ldr	r3, [pc, #172]	; (80006e0 <HAL_GPIO_Init+0x2b0>)
 8000632:	685a      	ldr	r2, [r3, #4]
 8000634:	69bb      	ldr	r3, [r7, #24]
 8000636:	43db      	mvns	r3, r3
 8000638:	4929      	ldr	r1, [pc, #164]	; (80006e0 <HAL_GPIO_Init+0x2b0>)
 800063a:	4013      	ands	r3, r2
 800063c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	685b      	ldr	r3, [r3, #4]
 8000642:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000646:	2b00      	cmp	r3, #0
 8000648:	d006      	beq.n	8000658 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800064a:	4b25      	ldr	r3, [pc, #148]	; (80006e0 <HAL_GPIO_Init+0x2b0>)
 800064c:	689a      	ldr	r2, [r3, #8]
 800064e:	4924      	ldr	r1, [pc, #144]	; (80006e0 <HAL_GPIO_Init+0x2b0>)
 8000650:	69bb      	ldr	r3, [r7, #24]
 8000652:	4313      	orrs	r3, r2
 8000654:	608b      	str	r3, [r1, #8]
 8000656:	e006      	b.n	8000666 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <HAL_GPIO_Init+0x2b0>)
 800065a:	689a      	ldr	r2, [r3, #8]
 800065c:	69bb      	ldr	r3, [r7, #24]
 800065e:	43db      	mvns	r3, r3
 8000660:	491f      	ldr	r1, [pc, #124]	; (80006e0 <HAL_GPIO_Init+0x2b0>)
 8000662:	4013      	ands	r3, r2
 8000664:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	685b      	ldr	r3, [r3, #4]
 800066a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800066e:	2b00      	cmp	r3, #0
 8000670:	d006      	beq.n	8000680 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000672:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <HAL_GPIO_Init+0x2b0>)
 8000674:	68da      	ldr	r2, [r3, #12]
 8000676:	491a      	ldr	r1, [pc, #104]	; (80006e0 <HAL_GPIO_Init+0x2b0>)
 8000678:	69bb      	ldr	r3, [r7, #24]
 800067a:	4313      	orrs	r3, r2
 800067c:	60cb      	str	r3, [r1, #12]
 800067e:	e006      	b.n	800068e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000680:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <HAL_GPIO_Init+0x2b0>)
 8000682:	68da      	ldr	r2, [r3, #12]
 8000684:	69bb      	ldr	r3, [r7, #24]
 8000686:	43db      	mvns	r3, r3
 8000688:	4915      	ldr	r1, [pc, #84]	; (80006e0 <HAL_GPIO_Init+0x2b0>)
 800068a:	4013      	ands	r3, r2
 800068c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800068e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000690:	3301      	adds	r3, #1
 8000692:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800069a:	fa22 f303 	lsr.w	r3, r2, r3
 800069e:	2b00      	cmp	r3, #0
 80006a0:	f47f aed0 	bne.w	8000444 <HAL_GPIO_Init+0x14>
  }
}
 80006a4:	bf00      	nop
 80006a6:	372c      	adds	r7, #44	; 0x2c
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bc80      	pop	{r7}
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	10210000 	.word	0x10210000
 80006b4:	10110000 	.word	0x10110000
 80006b8:	10120000 	.word	0x10120000
 80006bc:	10310000 	.word	0x10310000
 80006c0:	10320000 	.word	0x10320000
 80006c4:	10220000 	.word	0x10220000
 80006c8:	40021000 	.word	0x40021000
 80006cc:	40010000 	.word	0x40010000
 80006d0:	40010800 	.word	0x40010800
 80006d4:	40010c00 	.word	0x40010c00
 80006d8:	40011000 	.word	0x40011000
 80006dc:	40011400 	.word	0x40011400
 80006e0:	40010400 	.word	0x40010400

080006e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	460b      	mov	r3, r1
 80006ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	689a      	ldr	r2, [r3, #8]
 80006f4:	887b      	ldrh	r3, [r7, #2]
 80006f6:	4013      	ands	r3, r2
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d002      	beq.n	8000702 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80006fc:	2301      	movs	r3, #1
 80006fe:	73fb      	strb	r3, [r7, #15]
 8000700:	e001      	b.n	8000706 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000702:	2300      	movs	r3, #0
 8000704:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000706:	7bfb      	ldrb	r3, [r7, #15]
}
 8000708:	4618      	mov	r0, r3
 800070a:	3714      	adds	r7, #20
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr

08000712 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000712:	b480      	push	{r7}
 8000714:	b083      	sub	sp, #12
 8000716:	af00      	add	r7, sp, #0
 8000718:	6078      	str	r0, [r7, #4]
 800071a:	460b      	mov	r3, r1
 800071c:	807b      	strh	r3, [r7, #2]
 800071e:	4613      	mov	r3, r2
 8000720:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000722:	787b      	ldrb	r3, [r7, #1]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d003      	beq.n	8000730 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000728:	887a      	ldrh	r2, [r7, #2]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800072e:	e003      	b.n	8000738 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000730:	887b      	ldrh	r3, [r7, #2]
 8000732:	041a      	lsls	r2, r3, #16
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	611a      	str	r2, [r3, #16]
}
 8000738:	bf00      	nop
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr
	...

08000744 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d101      	bne.n	8000756 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000752:	2301      	movs	r3, #1
 8000754:	e26c      	b.n	8000c30 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	2b00      	cmp	r3, #0
 8000760:	f000 8087 	beq.w	8000872 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000764:	4b92      	ldr	r3, [pc, #584]	; (80009b0 <HAL_RCC_OscConfig+0x26c>)
 8000766:	685b      	ldr	r3, [r3, #4]
 8000768:	f003 030c 	and.w	r3, r3, #12
 800076c:	2b04      	cmp	r3, #4
 800076e:	d00c      	beq.n	800078a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000770:	4b8f      	ldr	r3, [pc, #572]	; (80009b0 <HAL_RCC_OscConfig+0x26c>)
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	f003 030c 	and.w	r3, r3, #12
 8000778:	2b08      	cmp	r3, #8
 800077a:	d112      	bne.n	80007a2 <HAL_RCC_OscConfig+0x5e>
 800077c:	4b8c      	ldr	r3, [pc, #560]	; (80009b0 <HAL_RCC_OscConfig+0x26c>)
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000788:	d10b      	bne.n	80007a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800078a:	4b89      	ldr	r3, [pc, #548]	; (80009b0 <HAL_RCC_OscConfig+0x26c>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000792:	2b00      	cmp	r3, #0
 8000794:	d06c      	beq.n	8000870 <HAL_RCC_OscConfig+0x12c>
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	685b      	ldr	r3, [r3, #4]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d168      	bne.n	8000870 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800079e:	2301      	movs	r3, #1
 80007a0:	e246      	b.n	8000c30 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	685b      	ldr	r3, [r3, #4]
 80007a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007aa:	d106      	bne.n	80007ba <HAL_RCC_OscConfig+0x76>
 80007ac:	4b80      	ldr	r3, [pc, #512]	; (80009b0 <HAL_RCC_OscConfig+0x26c>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a7f      	ldr	r2, [pc, #508]	; (80009b0 <HAL_RCC_OscConfig+0x26c>)
 80007b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007b6:	6013      	str	r3, [r2, #0]
 80007b8:	e02e      	b.n	8000818 <HAL_RCC_OscConfig+0xd4>
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d10c      	bne.n	80007dc <HAL_RCC_OscConfig+0x98>
 80007c2:	4b7b      	ldr	r3, [pc, #492]	; (80009b0 <HAL_RCC_OscConfig+0x26c>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a7a      	ldr	r2, [pc, #488]	; (80009b0 <HAL_RCC_OscConfig+0x26c>)
 80007c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007cc:	6013      	str	r3, [r2, #0]
 80007ce:	4b78      	ldr	r3, [pc, #480]	; (80009b0 <HAL_RCC_OscConfig+0x26c>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a77      	ldr	r2, [pc, #476]	; (80009b0 <HAL_RCC_OscConfig+0x26c>)
 80007d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007d8:	6013      	str	r3, [r2, #0]
 80007da:	e01d      	b.n	8000818 <HAL_RCC_OscConfig+0xd4>
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80007e4:	d10c      	bne.n	8000800 <HAL_RCC_OscConfig+0xbc>
 80007e6:	4b72      	ldr	r3, [pc, #456]	; (80009b0 <HAL_RCC_OscConfig+0x26c>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a71      	ldr	r2, [pc, #452]	; (80009b0 <HAL_RCC_OscConfig+0x26c>)
 80007ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007f0:	6013      	str	r3, [r2, #0]
 80007f2:	4b6f      	ldr	r3, [pc, #444]	; (80009b0 <HAL_RCC_OscConfig+0x26c>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a6e      	ldr	r2, [pc, #440]	; (80009b0 <HAL_RCC_OscConfig+0x26c>)
 80007f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007fc:	6013      	str	r3, [r2, #0]
 80007fe:	e00b      	b.n	8000818 <HAL_RCC_OscConfig+0xd4>
 8000800:	4b6b      	ldr	r3, [pc, #428]	; (80009b0 <HAL_RCC_OscConfig+0x26c>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a6a      	ldr	r2, [pc, #424]	; (80009b0 <HAL_RCC_OscConfig+0x26c>)
 8000806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800080a:	6013      	str	r3, [r2, #0]
 800080c:	4b68      	ldr	r3, [pc, #416]	; (80009b0 <HAL_RCC_OscConfig+0x26c>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a67      	ldr	r2, [pc, #412]	; (80009b0 <HAL_RCC_OscConfig+0x26c>)
 8000812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000816:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d013      	beq.n	8000848 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000820:	f7ff fcf6 	bl	8000210 <HAL_GetTick>
 8000824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000826:	e008      	b.n	800083a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000828:	f7ff fcf2 	bl	8000210 <HAL_GetTick>
 800082c:	4602      	mov	r2, r0
 800082e:	693b      	ldr	r3, [r7, #16]
 8000830:	1ad3      	subs	r3, r2, r3
 8000832:	2b64      	cmp	r3, #100	; 0x64
 8000834:	d901      	bls.n	800083a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000836:	2303      	movs	r3, #3
 8000838:	e1fa      	b.n	8000c30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800083a:	4b5d      	ldr	r3, [pc, #372]	; (80009b0 <HAL_RCC_OscConfig+0x26c>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000842:	2b00      	cmp	r3, #0
 8000844:	d0f0      	beq.n	8000828 <HAL_RCC_OscConfig+0xe4>
 8000846:	e014      	b.n	8000872 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000848:	f7ff fce2 	bl	8000210 <HAL_GetTick>
 800084c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800084e:	e008      	b.n	8000862 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000850:	f7ff fcde 	bl	8000210 <HAL_GetTick>
 8000854:	4602      	mov	r2, r0
 8000856:	693b      	ldr	r3, [r7, #16]
 8000858:	1ad3      	subs	r3, r2, r3
 800085a:	2b64      	cmp	r3, #100	; 0x64
 800085c:	d901      	bls.n	8000862 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800085e:	2303      	movs	r3, #3
 8000860:	e1e6      	b.n	8000c30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000862:	4b53      	ldr	r3, [pc, #332]	; (80009b0 <HAL_RCC_OscConfig+0x26c>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800086a:	2b00      	cmp	r3, #0
 800086c:	d1f0      	bne.n	8000850 <HAL_RCC_OscConfig+0x10c>
 800086e:	e000      	b.n	8000872 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	2b00      	cmp	r3, #0
 800087c:	d063      	beq.n	8000946 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800087e:	4b4c      	ldr	r3, [pc, #304]	; (80009b0 <HAL_RCC_OscConfig+0x26c>)
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	f003 030c 	and.w	r3, r3, #12
 8000886:	2b00      	cmp	r3, #0
 8000888:	d00b      	beq.n	80008a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800088a:	4b49      	ldr	r3, [pc, #292]	; (80009b0 <HAL_RCC_OscConfig+0x26c>)
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	f003 030c 	and.w	r3, r3, #12
 8000892:	2b08      	cmp	r3, #8
 8000894:	d11c      	bne.n	80008d0 <HAL_RCC_OscConfig+0x18c>
 8000896:	4b46      	ldr	r3, [pc, #280]	; (80009b0 <HAL_RCC_OscConfig+0x26c>)
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d116      	bne.n	80008d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008a2:	4b43      	ldr	r3, [pc, #268]	; (80009b0 <HAL_RCC_OscConfig+0x26c>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f003 0302 	and.w	r3, r3, #2
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d005      	beq.n	80008ba <HAL_RCC_OscConfig+0x176>
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	691b      	ldr	r3, [r3, #16]
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d001      	beq.n	80008ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80008b6:	2301      	movs	r3, #1
 80008b8:	e1ba      	b.n	8000c30 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008ba:	4b3d      	ldr	r3, [pc, #244]	; (80009b0 <HAL_RCC_OscConfig+0x26c>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	695b      	ldr	r3, [r3, #20]
 80008c6:	00db      	lsls	r3, r3, #3
 80008c8:	4939      	ldr	r1, [pc, #228]	; (80009b0 <HAL_RCC_OscConfig+0x26c>)
 80008ca:	4313      	orrs	r3, r2
 80008cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008ce:	e03a      	b.n	8000946 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	691b      	ldr	r3, [r3, #16]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d020      	beq.n	800091a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80008d8:	4b36      	ldr	r3, [pc, #216]	; (80009b4 <HAL_RCC_OscConfig+0x270>)
 80008da:	2201      	movs	r2, #1
 80008dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008de:	f7ff fc97 	bl	8000210 <HAL_GetTick>
 80008e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008e4:	e008      	b.n	80008f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80008e6:	f7ff fc93 	bl	8000210 <HAL_GetTick>
 80008ea:	4602      	mov	r2, r0
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	1ad3      	subs	r3, r2, r3
 80008f0:	2b02      	cmp	r3, #2
 80008f2:	d901      	bls.n	80008f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80008f4:	2303      	movs	r3, #3
 80008f6:	e19b      	b.n	8000c30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008f8:	4b2d      	ldr	r3, [pc, #180]	; (80009b0 <HAL_RCC_OscConfig+0x26c>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f003 0302 	and.w	r3, r3, #2
 8000900:	2b00      	cmp	r3, #0
 8000902:	d0f0      	beq.n	80008e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000904:	4b2a      	ldr	r3, [pc, #168]	; (80009b0 <HAL_RCC_OscConfig+0x26c>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	695b      	ldr	r3, [r3, #20]
 8000910:	00db      	lsls	r3, r3, #3
 8000912:	4927      	ldr	r1, [pc, #156]	; (80009b0 <HAL_RCC_OscConfig+0x26c>)
 8000914:	4313      	orrs	r3, r2
 8000916:	600b      	str	r3, [r1, #0]
 8000918:	e015      	b.n	8000946 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800091a:	4b26      	ldr	r3, [pc, #152]	; (80009b4 <HAL_RCC_OscConfig+0x270>)
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000920:	f7ff fc76 	bl	8000210 <HAL_GetTick>
 8000924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000926:	e008      	b.n	800093a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000928:	f7ff fc72 	bl	8000210 <HAL_GetTick>
 800092c:	4602      	mov	r2, r0
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	1ad3      	subs	r3, r2, r3
 8000932:	2b02      	cmp	r3, #2
 8000934:	d901      	bls.n	800093a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000936:	2303      	movs	r3, #3
 8000938:	e17a      	b.n	8000c30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800093a:	4b1d      	ldr	r3, [pc, #116]	; (80009b0 <HAL_RCC_OscConfig+0x26c>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	2b00      	cmp	r3, #0
 8000944:	d1f0      	bne.n	8000928 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f003 0308 	and.w	r3, r3, #8
 800094e:	2b00      	cmp	r3, #0
 8000950:	d03a      	beq.n	80009c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	699b      	ldr	r3, [r3, #24]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d019      	beq.n	800098e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800095a:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <HAL_RCC_OscConfig+0x274>)
 800095c:	2201      	movs	r2, #1
 800095e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000960:	f7ff fc56 	bl	8000210 <HAL_GetTick>
 8000964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000966:	e008      	b.n	800097a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000968:	f7ff fc52 	bl	8000210 <HAL_GetTick>
 800096c:	4602      	mov	r2, r0
 800096e:	693b      	ldr	r3, [r7, #16]
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	2b02      	cmp	r3, #2
 8000974:	d901      	bls.n	800097a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000976:	2303      	movs	r3, #3
 8000978:	e15a      	b.n	8000c30 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800097a:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <HAL_RCC_OscConfig+0x26c>)
 800097c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	2b00      	cmp	r3, #0
 8000984:	d0f0      	beq.n	8000968 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000986:	2001      	movs	r0, #1
 8000988:	f000 faa8 	bl	8000edc <RCC_Delay>
 800098c:	e01c      	b.n	80009c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800098e:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <HAL_RCC_OscConfig+0x274>)
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000994:	f7ff fc3c 	bl	8000210 <HAL_GetTick>
 8000998:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800099a:	e00f      	b.n	80009bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800099c:	f7ff fc38 	bl	8000210 <HAL_GetTick>
 80009a0:	4602      	mov	r2, r0
 80009a2:	693b      	ldr	r3, [r7, #16]
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	2b02      	cmp	r3, #2
 80009a8:	d908      	bls.n	80009bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80009aa:	2303      	movs	r3, #3
 80009ac:	e140      	b.n	8000c30 <HAL_RCC_OscConfig+0x4ec>
 80009ae:	bf00      	nop
 80009b0:	40021000 	.word	0x40021000
 80009b4:	42420000 	.word	0x42420000
 80009b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009bc:	4b9e      	ldr	r3, [pc, #632]	; (8000c38 <HAL_RCC_OscConfig+0x4f4>)
 80009be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c0:	f003 0302 	and.w	r3, r3, #2
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d1e9      	bne.n	800099c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f003 0304 	and.w	r3, r3, #4
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	f000 80a6 	beq.w	8000b22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80009d6:	2300      	movs	r3, #0
 80009d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009da:	4b97      	ldr	r3, [pc, #604]	; (8000c38 <HAL_RCC_OscConfig+0x4f4>)
 80009dc:	69db      	ldr	r3, [r3, #28]
 80009de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d10d      	bne.n	8000a02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80009e6:	4b94      	ldr	r3, [pc, #592]	; (8000c38 <HAL_RCC_OscConfig+0x4f4>)
 80009e8:	69db      	ldr	r3, [r3, #28]
 80009ea:	4a93      	ldr	r2, [pc, #588]	; (8000c38 <HAL_RCC_OscConfig+0x4f4>)
 80009ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f0:	61d3      	str	r3, [r2, #28]
 80009f2:	4b91      	ldr	r3, [pc, #580]	; (8000c38 <HAL_RCC_OscConfig+0x4f4>)
 80009f4:	69db      	ldr	r3, [r3, #28]
 80009f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80009fe:	2301      	movs	r3, #1
 8000a00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a02:	4b8e      	ldr	r3, [pc, #568]	; (8000c3c <HAL_RCC_OscConfig+0x4f8>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d118      	bne.n	8000a40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a0e:	4b8b      	ldr	r3, [pc, #556]	; (8000c3c <HAL_RCC_OscConfig+0x4f8>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a8a      	ldr	r2, [pc, #552]	; (8000c3c <HAL_RCC_OscConfig+0x4f8>)
 8000a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000a1a:	f7ff fbf9 	bl	8000210 <HAL_GetTick>
 8000a1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a20:	e008      	b.n	8000a34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a22:	f7ff fbf5 	bl	8000210 <HAL_GetTick>
 8000a26:	4602      	mov	r2, r0
 8000a28:	693b      	ldr	r3, [r7, #16]
 8000a2a:	1ad3      	subs	r3, r2, r3
 8000a2c:	2b64      	cmp	r3, #100	; 0x64
 8000a2e:	d901      	bls.n	8000a34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000a30:	2303      	movs	r3, #3
 8000a32:	e0fd      	b.n	8000c30 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a34:	4b81      	ldr	r3, [pc, #516]	; (8000c3c <HAL_RCC_OscConfig+0x4f8>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d0f0      	beq.n	8000a22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d106      	bne.n	8000a56 <HAL_RCC_OscConfig+0x312>
 8000a48:	4b7b      	ldr	r3, [pc, #492]	; (8000c38 <HAL_RCC_OscConfig+0x4f4>)
 8000a4a:	6a1b      	ldr	r3, [r3, #32]
 8000a4c:	4a7a      	ldr	r2, [pc, #488]	; (8000c38 <HAL_RCC_OscConfig+0x4f4>)
 8000a4e:	f043 0301 	orr.w	r3, r3, #1
 8000a52:	6213      	str	r3, [r2, #32]
 8000a54:	e02d      	b.n	8000ab2 <HAL_RCC_OscConfig+0x36e>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	68db      	ldr	r3, [r3, #12]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d10c      	bne.n	8000a78 <HAL_RCC_OscConfig+0x334>
 8000a5e:	4b76      	ldr	r3, [pc, #472]	; (8000c38 <HAL_RCC_OscConfig+0x4f4>)
 8000a60:	6a1b      	ldr	r3, [r3, #32]
 8000a62:	4a75      	ldr	r2, [pc, #468]	; (8000c38 <HAL_RCC_OscConfig+0x4f4>)
 8000a64:	f023 0301 	bic.w	r3, r3, #1
 8000a68:	6213      	str	r3, [r2, #32]
 8000a6a:	4b73      	ldr	r3, [pc, #460]	; (8000c38 <HAL_RCC_OscConfig+0x4f4>)
 8000a6c:	6a1b      	ldr	r3, [r3, #32]
 8000a6e:	4a72      	ldr	r2, [pc, #456]	; (8000c38 <HAL_RCC_OscConfig+0x4f4>)
 8000a70:	f023 0304 	bic.w	r3, r3, #4
 8000a74:	6213      	str	r3, [r2, #32]
 8000a76:	e01c      	b.n	8000ab2 <HAL_RCC_OscConfig+0x36e>
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	2b05      	cmp	r3, #5
 8000a7e:	d10c      	bne.n	8000a9a <HAL_RCC_OscConfig+0x356>
 8000a80:	4b6d      	ldr	r3, [pc, #436]	; (8000c38 <HAL_RCC_OscConfig+0x4f4>)
 8000a82:	6a1b      	ldr	r3, [r3, #32]
 8000a84:	4a6c      	ldr	r2, [pc, #432]	; (8000c38 <HAL_RCC_OscConfig+0x4f4>)
 8000a86:	f043 0304 	orr.w	r3, r3, #4
 8000a8a:	6213      	str	r3, [r2, #32]
 8000a8c:	4b6a      	ldr	r3, [pc, #424]	; (8000c38 <HAL_RCC_OscConfig+0x4f4>)
 8000a8e:	6a1b      	ldr	r3, [r3, #32]
 8000a90:	4a69      	ldr	r2, [pc, #420]	; (8000c38 <HAL_RCC_OscConfig+0x4f4>)
 8000a92:	f043 0301 	orr.w	r3, r3, #1
 8000a96:	6213      	str	r3, [r2, #32]
 8000a98:	e00b      	b.n	8000ab2 <HAL_RCC_OscConfig+0x36e>
 8000a9a:	4b67      	ldr	r3, [pc, #412]	; (8000c38 <HAL_RCC_OscConfig+0x4f4>)
 8000a9c:	6a1b      	ldr	r3, [r3, #32]
 8000a9e:	4a66      	ldr	r2, [pc, #408]	; (8000c38 <HAL_RCC_OscConfig+0x4f4>)
 8000aa0:	f023 0301 	bic.w	r3, r3, #1
 8000aa4:	6213      	str	r3, [r2, #32]
 8000aa6:	4b64      	ldr	r3, [pc, #400]	; (8000c38 <HAL_RCC_OscConfig+0x4f4>)
 8000aa8:	6a1b      	ldr	r3, [r3, #32]
 8000aaa:	4a63      	ldr	r2, [pc, #396]	; (8000c38 <HAL_RCC_OscConfig+0x4f4>)
 8000aac:	f023 0304 	bic.w	r3, r3, #4
 8000ab0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	68db      	ldr	r3, [r3, #12]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d015      	beq.n	8000ae6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000aba:	f7ff fba9 	bl	8000210 <HAL_GetTick>
 8000abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ac0:	e00a      	b.n	8000ad8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ac2:	f7ff fba5 	bl	8000210 <HAL_GetTick>
 8000ac6:	4602      	mov	r2, r0
 8000ac8:	693b      	ldr	r3, [r7, #16]
 8000aca:	1ad3      	subs	r3, r2, r3
 8000acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d901      	bls.n	8000ad8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	e0ab      	b.n	8000c30 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ad8:	4b57      	ldr	r3, [pc, #348]	; (8000c38 <HAL_RCC_OscConfig+0x4f4>)
 8000ada:	6a1b      	ldr	r3, [r3, #32]
 8000adc:	f003 0302 	and.w	r3, r3, #2
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d0ee      	beq.n	8000ac2 <HAL_RCC_OscConfig+0x37e>
 8000ae4:	e014      	b.n	8000b10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ae6:	f7ff fb93 	bl	8000210 <HAL_GetTick>
 8000aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000aec:	e00a      	b.n	8000b04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000aee:	f7ff fb8f 	bl	8000210 <HAL_GetTick>
 8000af2:	4602      	mov	r2, r0
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	1ad3      	subs	r3, r2, r3
 8000af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d901      	bls.n	8000b04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000b00:	2303      	movs	r3, #3
 8000b02:	e095      	b.n	8000c30 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b04:	4b4c      	ldr	r3, [pc, #304]	; (8000c38 <HAL_RCC_OscConfig+0x4f4>)
 8000b06:	6a1b      	ldr	r3, [r3, #32]
 8000b08:	f003 0302 	and.w	r3, r3, #2
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d1ee      	bne.n	8000aee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000b10:	7dfb      	ldrb	r3, [r7, #23]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d105      	bne.n	8000b22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b16:	4b48      	ldr	r3, [pc, #288]	; (8000c38 <HAL_RCC_OscConfig+0x4f4>)
 8000b18:	69db      	ldr	r3, [r3, #28]
 8000b1a:	4a47      	ldr	r2, [pc, #284]	; (8000c38 <HAL_RCC_OscConfig+0x4f4>)
 8000b1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	69db      	ldr	r3, [r3, #28]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	f000 8081 	beq.w	8000c2e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b2c:	4b42      	ldr	r3, [pc, #264]	; (8000c38 <HAL_RCC_OscConfig+0x4f4>)
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f003 030c 	and.w	r3, r3, #12
 8000b34:	2b08      	cmp	r3, #8
 8000b36:	d061      	beq.n	8000bfc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	69db      	ldr	r3, [r3, #28]
 8000b3c:	2b02      	cmp	r3, #2
 8000b3e:	d146      	bne.n	8000bce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b40:	4b3f      	ldr	r3, [pc, #252]	; (8000c40 <HAL_RCC_OscConfig+0x4fc>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b46:	f7ff fb63 	bl	8000210 <HAL_GetTick>
 8000b4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b4c:	e008      	b.n	8000b60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b4e:	f7ff fb5f 	bl	8000210 <HAL_GetTick>
 8000b52:	4602      	mov	r2, r0
 8000b54:	693b      	ldr	r3, [r7, #16]
 8000b56:	1ad3      	subs	r3, r2, r3
 8000b58:	2b02      	cmp	r3, #2
 8000b5a:	d901      	bls.n	8000b60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	e067      	b.n	8000c30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b60:	4b35      	ldr	r3, [pc, #212]	; (8000c38 <HAL_RCC_OscConfig+0x4f4>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d1f0      	bne.n	8000b4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6a1b      	ldr	r3, [r3, #32]
 8000b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b74:	d108      	bne.n	8000b88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000b76:	4b30      	ldr	r3, [pc, #192]	; (8000c38 <HAL_RCC_OscConfig+0x4f4>)
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	492d      	ldr	r1, [pc, #180]	; (8000c38 <HAL_RCC_OscConfig+0x4f4>)
 8000b84:	4313      	orrs	r3, r2
 8000b86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b88:	4b2b      	ldr	r3, [pc, #172]	; (8000c38 <HAL_RCC_OscConfig+0x4f4>)
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6a19      	ldr	r1, [r3, #32]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b98:	430b      	orrs	r3, r1
 8000b9a:	4927      	ldr	r1, [pc, #156]	; (8000c38 <HAL_RCC_OscConfig+0x4f4>)
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ba0:	4b27      	ldr	r3, [pc, #156]	; (8000c40 <HAL_RCC_OscConfig+0x4fc>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ba6:	f7ff fb33 	bl	8000210 <HAL_GetTick>
 8000baa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bac:	e008      	b.n	8000bc0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bae:	f7ff fb2f 	bl	8000210 <HAL_GetTick>
 8000bb2:	4602      	mov	r2, r0
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	1ad3      	subs	r3, r2, r3
 8000bb8:	2b02      	cmp	r3, #2
 8000bba:	d901      	bls.n	8000bc0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	e037      	b.n	8000c30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bc0:	4b1d      	ldr	r3, [pc, #116]	; (8000c38 <HAL_RCC_OscConfig+0x4f4>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d0f0      	beq.n	8000bae <HAL_RCC_OscConfig+0x46a>
 8000bcc:	e02f      	b.n	8000c2e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000bce:	4b1c      	ldr	r3, [pc, #112]	; (8000c40 <HAL_RCC_OscConfig+0x4fc>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bd4:	f7ff fb1c 	bl	8000210 <HAL_GetTick>
 8000bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bda:	e008      	b.n	8000bee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bdc:	f7ff fb18 	bl	8000210 <HAL_GetTick>
 8000be0:	4602      	mov	r2, r0
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	2b02      	cmp	r3, #2
 8000be8:	d901      	bls.n	8000bee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000bea:	2303      	movs	r3, #3
 8000bec:	e020      	b.n	8000c30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bee:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <HAL_RCC_OscConfig+0x4f4>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d1f0      	bne.n	8000bdc <HAL_RCC_OscConfig+0x498>
 8000bfa:	e018      	b.n	8000c2e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	69db      	ldr	r3, [r3, #28]
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d101      	bne.n	8000c08 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000c04:	2301      	movs	r3, #1
 8000c06:	e013      	b.n	8000c30 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000c08:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <HAL_RCC_OscConfig+0x4f4>)
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6a1b      	ldr	r3, [r3, #32]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d106      	bne.n	8000c2a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d001      	beq.n	8000c2e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e000      	b.n	8000c30 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000c2e:	2300      	movs	r3, #0
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3718      	adds	r7, #24
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	40007000 	.word	0x40007000
 8000c40:	42420060 	.word	0x42420060

08000c44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d101      	bne.n	8000c58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000c54:	2301      	movs	r3, #1
 8000c56:	e0d0      	b.n	8000dfa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000c58:	4b6a      	ldr	r3, [pc, #424]	; (8000e04 <HAL_RCC_ClockConfig+0x1c0>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f003 0307 	and.w	r3, r3, #7
 8000c60:	683a      	ldr	r2, [r7, #0]
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d910      	bls.n	8000c88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c66:	4b67      	ldr	r3, [pc, #412]	; (8000e04 <HAL_RCC_ClockConfig+0x1c0>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f023 0207 	bic.w	r2, r3, #7
 8000c6e:	4965      	ldr	r1, [pc, #404]	; (8000e04 <HAL_RCC_ClockConfig+0x1c0>)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c76:	4b63      	ldr	r3, [pc, #396]	; (8000e04 <HAL_RCC_ClockConfig+0x1c0>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	683a      	ldr	r2, [r7, #0]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d001      	beq.n	8000c88 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000c84:	2301      	movs	r3, #1
 8000c86:	e0b8      	b.n	8000dfa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f003 0302 	and.w	r3, r3, #2
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d020      	beq.n	8000cd6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f003 0304 	and.w	r3, r3, #4
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d005      	beq.n	8000cac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000ca0:	4b59      	ldr	r3, [pc, #356]	; (8000e08 <HAL_RCC_ClockConfig+0x1c4>)
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	4a58      	ldr	r2, [pc, #352]	; (8000e08 <HAL_RCC_ClockConfig+0x1c4>)
 8000ca6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000caa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f003 0308 	and.w	r3, r3, #8
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d005      	beq.n	8000cc4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000cb8:	4b53      	ldr	r3, [pc, #332]	; (8000e08 <HAL_RCC_ClockConfig+0x1c4>)
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	4a52      	ldr	r2, [pc, #328]	; (8000e08 <HAL_RCC_ClockConfig+0x1c4>)
 8000cbe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000cc2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cc4:	4b50      	ldr	r3, [pc, #320]	; (8000e08 <HAL_RCC_ClockConfig+0x1c4>)
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	494d      	ldr	r1, [pc, #308]	; (8000e08 <HAL_RCC_ClockConfig+0x1c4>)
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d040      	beq.n	8000d64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d107      	bne.n	8000cfa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cea:	4b47      	ldr	r3, [pc, #284]	; (8000e08 <HAL_RCC_ClockConfig+0x1c4>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d115      	bne.n	8000d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e07f      	b.n	8000dfa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d107      	bne.n	8000d12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d02:	4b41      	ldr	r3, [pc, #260]	; (8000e08 <HAL_RCC_ClockConfig+0x1c4>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d109      	bne.n	8000d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e073      	b.n	8000dfa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d12:	4b3d      	ldr	r3, [pc, #244]	; (8000e08 <HAL_RCC_ClockConfig+0x1c4>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d101      	bne.n	8000d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e06b      	b.n	8000dfa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d22:	4b39      	ldr	r3, [pc, #228]	; (8000e08 <HAL_RCC_ClockConfig+0x1c4>)
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f023 0203 	bic.w	r2, r3, #3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	4936      	ldr	r1, [pc, #216]	; (8000e08 <HAL_RCC_ClockConfig+0x1c4>)
 8000d30:	4313      	orrs	r3, r2
 8000d32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000d34:	f7ff fa6c 	bl	8000210 <HAL_GetTick>
 8000d38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d3a:	e00a      	b.n	8000d52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d3c:	f7ff fa68 	bl	8000210 <HAL_GetTick>
 8000d40:	4602      	mov	r2, r0
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d901      	bls.n	8000d52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	e053      	b.n	8000dfa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d52:	4b2d      	ldr	r3, [pc, #180]	; (8000e08 <HAL_RCC_ClockConfig+0x1c4>)
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f003 020c 	and.w	r2, r3, #12
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d1eb      	bne.n	8000d3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000d64:	4b27      	ldr	r3, [pc, #156]	; (8000e04 <HAL_RCC_ClockConfig+0x1c0>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f003 0307 	and.w	r3, r3, #7
 8000d6c:	683a      	ldr	r2, [r7, #0]
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d210      	bcs.n	8000d94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d72:	4b24      	ldr	r3, [pc, #144]	; (8000e04 <HAL_RCC_ClockConfig+0x1c0>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f023 0207 	bic.w	r2, r3, #7
 8000d7a:	4922      	ldr	r1, [pc, #136]	; (8000e04 <HAL_RCC_ClockConfig+0x1c0>)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d82:	4b20      	ldr	r3, [pc, #128]	; (8000e04 <HAL_RCC_ClockConfig+0x1c0>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	683a      	ldr	r2, [r7, #0]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d001      	beq.n	8000d94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000d90:	2301      	movs	r3, #1
 8000d92:	e032      	b.n	8000dfa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f003 0304 	and.w	r3, r3, #4
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d008      	beq.n	8000db2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000da0:	4b19      	ldr	r3, [pc, #100]	; (8000e08 <HAL_RCC_ClockConfig+0x1c4>)
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	4916      	ldr	r1, [pc, #88]	; (8000e08 <HAL_RCC_ClockConfig+0x1c4>)
 8000dae:	4313      	orrs	r3, r2
 8000db0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f003 0308 	and.w	r3, r3, #8
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d009      	beq.n	8000dd2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000dbe:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <HAL_RCC_ClockConfig+0x1c4>)
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	691b      	ldr	r3, [r3, #16]
 8000dca:	00db      	lsls	r3, r3, #3
 8000dcc:	490e      	ldr	r1, [pc, #56]	; (8000e08 <HAL_RCC_ClockConfig+0x1c4>)
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000dd2:	f000 f821 	bl	8000e18 <HAL_RCC_GetSysClockFreq>
 8000dd6:	4601      	mov	r1, r0
 8000dd8:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <HAL_RCC_ClockConfig+0x1c4>)
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	091b      	lsrs	r3, r3, #4
 8000dde:	f003 030f 	and.w	r3, r3, #15
 8000de2:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <HAL_RCC_ClockConfig+0x1c8>)
 8000de4:	5cd3      	ldrb	r3, [r2, r3]
 8000de6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dea:	4a09      	ldr	r2, [pc, #36]	; (8000e10 <HAL_RCC_ClockConfig+0x1cc>)
 8000dec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000dee:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <HAL_RCC_ClockConfig+0x1d0>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff f9ca 	bl	800018c <HAL_InitTick>

  return HAL_OK;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40022000 	.word	0x40022000
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	0800adb8 	.word	0x0800adb8
 8000e10:	20000008 	.word	0x20000008
 8000e14:	20000000 	.word	0x20000000

08000e18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e18:	b490      	push	{r4, r7}
 8000e1a:	b08a      	sub	sp, #40	; 0x28
 8000e1c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000e1e:	4b2a      	ldr	r3, [pc, #168]	; (8000ec8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000e20:	1d3c      	adds	r4, r7, #4
 8000e22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000e28:	4b28      	ldr	r3, [pc, #160]	; (8000ecc <HAL_RCC_GetSysClockFreq+0xb4>)
 8000e2a:	881b      	ldrh	r3, [r3, #0]
 8000e2c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
 8000e32:	2300      	movs	r3, #0
 8000e34:	61bb      	str	r3, [r7, #24]
 8000e36:	2300      	movs	r3, #0
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000e42:	4b23      	ldr	r3, [pc, #140]	; (8000ed0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	f003 030c 	and.w	r3, r3, #12
 8000e4e:	2b04      	cmp	r3, #4
 8000e50:	d002      	beq.n	8000e58 <HAL_RCC_GetSysClockFreq+0x40>
 8000e52:	2b08      	cmp	r3, #8
 8000e54:	d003      	beq.n	8000e5e <HAL_RCC_GetSysClockFreq+0x46>
 8000e56:	e02d      	b.n	8000eb4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000e58:	4b1e      	ldr	r3, [pc, #120]	; (8000ed4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e5a:	623b      	str	r3, [r7, #32]
      break;
 8000e5c:	e02d      	b.n	8000eba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	0c9b      	lsrs	r3, r3, #18
 8000e62:	f003 030f 	and.w	r3, r3, #15
 8000e66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e6a:	4413      	add	r3, r2
 8000e6c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000e70:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d013      	beq.n	8000ea4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000e7c:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	0c5b      	lsrs	r3, r3, #17
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e8a:	4413      	add	r3, r2
 8000e8c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000e90:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	4a0f      	ldr	r2, [pc, #60]	; (8000ed4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e96:	fb02 f203 	mul.w	r2, r2, r3
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ea2:	e004      	b.n	8000eae <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	4a0c      	ldr	r2, [pc, #48]	; (8000ed8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000ea8:	fb02 f303 	mul.w	r3, r2, r3
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb0:	623b      	str	r3, [r7, #32]
      break;
 8000eb2:	e002      	b.n	8000eba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000eb4:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000eb6:	623b      	str	r3, [r7, #32]
      break;
 8000eb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000eba:	6a3b      	ldr	r3, [r7, #32]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3728      	adds	r7, #40	; 0x28
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc90      	pop	{r4, r7}
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	080022e4 	.word	0x080022e4
 8000ecc:	080022f4 	.word	0x080022f4
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	007a1200 	.word	0x007a1200
 8000ed8:	003d0900 	.word	0x003d0900

08000edc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000ee4:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <RCC_Delay+0x34>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a0a      	ldr	r2, [pc, #40]	; (8000f14 <RCC_Delay+0x38>)
 8000eea:	fba2 2303 	umull	r2, r3, r2, r3
 8000eee:	0a5b      	lsrs	r3, r3, #9
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	fb02 f303 	mul.w	r3, r2, r3
 8000ef6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000ef8:	bf00      	nop
  }
  while (Delay --);
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	1e5a      	subs	r2, r3, #1
 8000efe:	60fa      	str	r2, [r7, #12]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d1f9      	bne.n	8000ef8 <RCC_Delay+0x1c>
}
 8000f04:	bf00      	nop
 8000f06:	3714      	adds	r7, #20
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bc80      	pop	{r7}
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	20000008 	.word	0x20000008
 8000f14:	10624dd3 	.word	0x10624dd3

08000f18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d101      	bne.n	8000f2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e053      	b.n	8000fd2 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d106      	bne.n	8000f4a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f001 f88b 	bl	8002060 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f60:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685a      	ldr	r2, [r3, #4]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	431a      	orrs	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	431a      	orrs	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	691b      	ldr	r3, [r3, #16]
 8000f76:	431a      	orrs	r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	695b      	ldr	r3, [r3, #20]
 8000f7c:	431a      	orrs	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	699b      	ldr	r3, [r3, #24]
 8000f82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f86:	431a      	orrs	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	69db      	ldr	r3, [r3, #28]
 8000f8c:	431a      	orrs	r2, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6a1b      	ldr	r3, [r3, #32]
 8000f92:	ea42 0103 	orr.w	r1, r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	0c1a      	lsrs	r2, r3, #16
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f002 0204 	and.w	r2, r2, #4
 8000fb0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	69da      	ldr	r2, [r3, #28]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000fc0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2201      	movs	r2, #1
 8000fcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b088      	sub	sp, #32
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	60f8      	str	r0, [r7, #12]
 8000fe2:	60b9      	str	r1, [r7, #8]
 8000fe4:	603b      	str	r3, [r7, #0]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8000fea:	2300      	movs	r3, #0
 8000fec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d101      	bne.n	8000ffc <HAL_SPI_Transmit+0x22>
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	e11e      	b.n	800123a <HAL_SPI_Transmit+0x260>
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2201      	movs	r2, #1
 8001000:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001004:	f7ff f904 	bl	8000210 <HAL_GetTick>
 8001008:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800100a:	88fb      	ldrh	r3, [r7, #6]
 800100c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b01      	cmp	r3, #1
 8001018:	d002      	beq.n	8001020 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800101a:	2302      	movs	r3, #2
 800101c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800101e:	e103      	b.n	8001228 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d002      	beq.n	800102c <HAL_SPI_Transmit+0x52>
 8001026:	88fb      	ldrh	r3, [r7, #6]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d102      	bne.n	8001032 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001030:	e0fa      	b.n	8001228 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	2203      	movs	r2, #3
 8001036:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2200      	movs	r2, #0
 800103e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	88fa      	ldrh	r2, [r7, #6]
 800104a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	88fa      	ldrh	r2, [r7, #6]
 8001050:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	2200      	movs	r2, #0
 8001056:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2200      	movs	r2, #0
 800105c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	2200      	movs	r2, #0
 8001062:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2200      	movs	r2, #0
 8001068:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	2200      	movs	r2, #0
 800106e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001078:	d107      	bne.n	800108a <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001088:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001094:	2b40      	cmp	r3, #64	; 0x40
 8001096:	d007      	beq.n	80010a8 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80010b0:	d14b      	bne.n	800114a <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d002      	beq.n	80010c0 <HAL_SPI_Transmit+0xe6>
 80010ba:	8afb      	ldrh	r3, [r7, #22]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d13e      	bne.n	800113e <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c4:	881a      	ldrh	r2, [r3, #0]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d0:	1c9a      	adds	r2, r3, #2
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80010da:	b29b      	uxth	r3, r3
 80010dc:	3b01      	subs	r3, #1
 80010de:	b29a      	uxth	r2, r3
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80010e4:	e02b      	b.n	800113e <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	f003 0302 	and.w	r3, r3, #2
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d112      	bne.n	800111a <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f8:	881a      	ldrh	r2, [r3, #0]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001104:	1c9a      	adds	r2, r3, #2
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800110e:	b29b      	uxth	r3, r3
 8001110:	3b01      	subs	r3, #1
 8001112:	b29a      	uxth	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	86da      	strh	r2, [r3, #54]	; 0x36
 8001118:	e011      	b.n	800113e <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800111a:	f7ff f879 	bl	8000210 <HAL_GetTick>
 800111e:	4602      	mov	r2, r0
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	683a      	ldr	r2, [r7, #0]
 8001126:	429a      	cmp	r2, r3
 8001128:	d803      	bhi.n	8001132 <HAL_SPI_Transmit+0x158>
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001130:	d102      	bne.n	8001138 <HAL_SPI_Transmit+0x15e>
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d102      	bne.n	800113e <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800113c:	e074      	b.n	8001228 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001142:	b29b      	uxth	r3, r3
 8001144:	2b00      	cmp	r3, #0
 8001146:	d1ce      	bne.n	80010e6 <HAL_SPI_Transmit+0x10c>
 8001148:	e04c      	b.n	80011e4 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d002      	beq.n	8001158 <HAL_SPI_Transmit+0x17e>
 8001152:	8afb      	ldrh	r3, [r7, #22]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d140      	bne.n	80011da <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	330c      	adds	r3, #12
 8001162:	7812      	ldrb	r2, [r2, #0]
 8001164:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	1c5a      	adds	r2, r3, #1
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001174:	b29b      	uxth	r3, r3
 8001176:	3b01      	subs	r3, #1
 8001178:	b29a      	uxth	r2, r3
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800117e:	e02c      	b.n	80011da <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	2b02      	cmp	r3, #2
 800118c:	d113      	bne.n	80011b6 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	330c      	adds	r3, #12
 8001198:	7812      	ldrb	r2, [r2, #0]
 800119a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a0:	1c5a      	adds	r2, r3, #1
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	3b01      	subs	r3, #1
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	86da      	strh	r2, [r3, #54]	; 0x36
 80011b4:	e011      	b.n	80011da <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80011b6:	f7ff f82b 	bl	8000210 <HAL_GetTick>
 80011ba:	4602      	mov	r2, r0
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	683a      	ldr	r2, [r7, #0]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d803      	bhi.n	80011ce <HAL_SPI_Transmit+0x1f4>
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011cc:	d102      	bne.n	80011d4 <HAL_SPI_Transmit+0x1fa>
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d102      	bne.n	80011da <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80011d8:	e026      	b.n	8001228 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80011de:	b29b      	uxth	r3, r3
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1cd      	bne.n	8001180 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	6839      	ldr	r1, [r7, #0]
 80011e8:	68f8      	ldr	r0, [r7, #12]
 80011ea:	f000 fa36 	bl	800165a <SPI_EndRxTxTransaction>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d002      	beq.n	80011fa <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2220      	movs	r2, #32
 80011f8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d10a      	bne.n	8001218 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	613b      	str	r3, [r7, #16]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	613b      	str	r3, [r7, #16]
 8001216:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800121c:	2b00      	cmp	r3, #0
 800121e:	d002      	beq.n	8001226 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	77fb      	strb	r3, [r7, #31]
 8001224:	e000      	b.n	8001228 <HAL_SPI_Transmit+0x24e>
  }

error:
 8001226:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2201      	movs	r2, #1
 800122c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2200      	movs	r2, #0
 8001234:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001238:	7ffb      	ldrb	r3, [r7, #31]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3720      	adds	r7, #32
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b08c      	sub	sp, #48	; 0x30
 8001246:	af00      	add	r7, sp, #0
 8001248:	60f8      	str	r0, [r7, #12]
 800124a:	60b9      	str	r1, [r7, #8]
 800124c:	607a      	str	r2, [r7, #4]
 800124e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001250:	2301      	movs	r3, #1
 8001252:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001254:	2300      	movs	r3, #0
 8001256:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001260:	2b01      	cmp	r3, #1
 8001262:	d101      	bne.n	8001268 <HAL_SPI_TransmitReceive+0x26>
 8001264:	2302      	movs	r3, #2
 8001266:	e18a      	b.n	800157e <HAL_SPI_TransmitReceive+0x33c>
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2201      	movs	r2, #1
 800126c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001270:	f7fe ffce 	bl	8000210 <HAL_GetTick>
 8001274:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800127c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001286:	887b      	ldrh	r3, [r7, #2]
 8001288:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800128a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800128e:	2b01      	cmp	r3, #1
 8001290:	d00f      	beq.n	80012b2 <HAL_SPI_TransmitReceive+0x70>
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001298:	d107      	bne.n	80012aa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d103      	bne.n	80012aa <HAL_SPI_TransmitReceive+0x68>
 80012a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	d003      	beq.n	80012b2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80012aa:	2302      	movs	r3, #2
 80012ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80012b0:	e15b      	b.n	800156a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d005      	beq.n	80012c4 <HAL_SPI_TransmitReceive+0x82>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d002      	beq.n	80012c4 <HAL_SPI_TransmitReceive+0x82>
 80012be:	887b      	ldrh	r3, [r7, #2]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d103      	bne.n	80012cc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80012ca:	e14e      	b.n	800156a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	2b04      	cmp	r3, #4
 80012d6:	d003      	beq.n	80012e0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2205      	movs	r2, #5
 80012dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2200      	movs	r2, #0
 80012e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	887a      	ldrh	r2, [r7, #2]
 80012f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	887a      	ldrh	r2, [r7, #2]
 80012f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	887a      	ldrh	r2, [r7, #2]
 8001302:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	887a      	ldrh	r2, [r7, #2]
 8001308:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	2200      	movs	r2, #0
 800130e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2200      	movs	r2, #0
 8001314:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001320:	2b40      	cmp	r3, #64	; 0x40
 8001322:	d007      	beq.n	8001334 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001332:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800133c:	d178      	bne.n	8001430 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d002      	beq.n	800134c <HAL_SPI_TransmitReceive+0x10a>
 8001346:	8b7b      	ldrh	r3, [r7, #26]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d166      	bne.n	800141a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001350:	881a      	ldrh	r2, [r3, #0]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135c:	1c9a      	adds	r2, r3, #2
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001366:	b29b      	uxth	r3, r3
 8001368:	3b01      	subs	r3, #1
 800136a:	b29a      	uxth	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001370:	e053      	b.n	800141a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	2b02      	cmp	r3, #2
 800137e:	d11b      	bne.n	80013b8 <HAL_SPI_TransmitReceive+0x176>
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001384:	b29b      	uxth	r3, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	d016      	beq.n	80013b8 <HAL_SPI_TransmitReceive+0x176>
 800138a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800138c:	2b01      	cmp	r3, #1
 800138e:	d113      	bne.n	80013b8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001394:	881a      	ldrh	r2, [r3, #0]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a0:	1c9a      	adds	r2, r3, #2
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	3b01      	subs	r3, #1
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80013b4:	2300      	movs	r3, #0
 80013b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d119      	bne.n	80013fa <HAL_SPI_TransmitReceive+0x1b8>
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d014      	beq.n	80013fa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	68da      	ldr	r2, [r3, #12]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013da:	b292      	uxth	r2, r2
 80013dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013e2:	1c9a      	adds	r2, r3, #2
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	3b01      	subs	r3, #1
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80013f6:	2301      	movs	r3, #1
 80013f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80013fa:	f7fe ff09 	bl	8000210 <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001406:	429a      	cmp	r2, r3
 8001408:	d807      	bhi.n	800141a <HAL_SPI_TransmitReceive+0x1d8>
 800140a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800140c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001410:	d003      	beq.n	800141a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001418:	e0a7      	b.n	800156a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800141e:	b29b      	uxth	r3, r3
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1a6      	bne.n	8001372 <HAL_SPI_TransmitReceive+0x130>
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001428:	b29b      	uxth	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1a1      	bne.n	8001372 <HAL_SPI_TransmitReceive+0x130>
 800142e:	e07c      	b.n	800152a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d002      	beq.n	800143e <HAL_SPI_TransmitReceive+0x1fc>
 8001438:	8b7b      	ldrh	r3, [r7, #26]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d16b      	bne.n	8001516 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	330c      	adds	r3, #12
 8001448:	7812      	ldrb	r2, [r2, #0]
 800144a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001450:	1c5a      	adds	r2, r3, #1
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800145a:	b29b      	uxth	r3, r3
 800145c:	3b01      	subs	r3, #1
 800145e:	b29a      	uxth	r2, r3
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001464:	e057      	b.n	8001516 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	2b02      	cmp	r3, #2
 8001472:	d11c      	bne.n	80014ae <HAL_SPI_TransmitReceive+0x26c>
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001478:	b29b      	uxth	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d017      	beq.n	80014ae <HAL_SPI_TransmitReceive+0x26c>
 800147e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001480:	2b01      	cmp	r3, #1
 8001482:	d114      	bne.n	80014ae <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	330c      	adds	r3, #12
 800148e:	7812      	ldrb	r2, [r2, #0]
 8001490:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	1c5a      	adds	r2, r3, #1
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	3b01      	subs	r3, #1
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80014aa:	2300      	movs	r3, #0
 80014ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d119      	bne.n	80014f0 <HAL_SPI_TransmitReceive+0x2ae>
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d014      	beq.n	80014f0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	68da      	ldr	r2, [r3, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014d8:	1c5a      	adds	r2, r3, #1
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	3b01      	subs	r3, #1
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80014ec:	2301      	movs	r3, #1
 80014ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80014f0:	f7fe fe8e 	bl	8000210 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d803      	bhi.n	8001508 <HAL_SPI_TransmitReceive+0x2c6>
 8001500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001502:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001506:	d102      	bne.n	800150e <HAL_SPI_TransmitReceive+0x2cc>
 8001508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800150a:	2b00      	cmp	r3, #0
 800150c:	d103      	bne.n	8001516 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001514:	e029      	b.n	800156a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800151a:	b29b      	uxth	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	d1a2      	bne.n	8001466 <HAL_SPI_TransmitReceive+0x224>
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001524:	b29b      	uxth	r3, r3
 8001526:	2b00      	cmp	r3, #0
 8001528:	d19d      	bne.n	8001466 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800152a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800152c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800152e:	68f8      	ldr	r0, [r7, #12]
 8001530:	f000 f893 	bl	800165a <SPI_EndRxTxTransaction>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d006      	beq.n	8001548 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2220      	movs	r2, #32
 8001544:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001546:	e010      	b.n	800156a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d10b      	bne.n	8001568 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	617b      	str	r3, [r7, #20]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	617b      	str	r3, [r7, #20]
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	e000      	b.n	800156a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001568:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2201      	movs	r2, #1
 800156e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800157a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800157e:	4618      	mov	r0, r3
 8001580:	3730      	adds	r7, #48	; 0x30
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b084      	sub	sp, #16
 800158a:	af00      	add	r7, sp, #0
 800158c:	60f8      	str	r0, [r7, #12]
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	603b      	str	r3, [r7, #0]
 8001592:	4613      	mov	r3, r2
 8001594:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001596:	e04c      	b.n	8001632 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800159e:	d048      	beq.n	8001632 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80015a0:	f7fe fe36 	bl	8000210 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d902      	bls.n	80015b6 <SPI_WaitFlagStateUntilTimeout+0x30>
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d13d      	bne.n	8001632 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80015c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80015ce:	d111      	bne.n	80015f4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015d8:	d004      	beq.n	80015e4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015e2:	d107      	bne.n	80015f4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015fc:	d10f      	bne.n	800161e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800161c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2201      	movs	r2, #1
 8001622:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e00f      	b.n	8001652 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	689a      	ldr	r2, [r3, #8]
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	4013      	ands	r3, r2
 800163c:	68ba      	ldr	r2, [r7, #8]
 800163e:	429a      	cmp	r2, r3
 8001640:	bf0c      	ite	eq
 8001642:	2301      	moveq	r3, #1
 8001644:	2300      	movne	r3, #0
 8001646:	b2db      	uxtb	r3, r3
 8001648:	461a      	mov	r2, r3
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	429a      	cmp	r2, r3
 800164e:	d1a3      	bne.n	8001598 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b086      	sub	sp, #24
 800165e:	af02      	add	r7, sp, #8
 8001660:	60f8      	str	r0, [r7, #12]
 8001662:	60b9      	str	r1, [r7, #8]
 8001664:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	2200      	movs	r2, #0
 800166e:	2180      	movs	r1, #128	; 0x80
 8001670:	68f8      	ldr	r0, [r7, #12]
 8001672:	f7ff ff88 	bl	8001586 <SPI_WaitFlagStateUntilTimeout>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d007      	beq.n	800168c <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001680:	f043 0220 	orr.w	r2, r3, #32
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e000      	b.n	800168e <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <SPI_Delay>:
#include "Display_EPD_W21_spi.h"

extern SPI_HandleTypeDef hspi1;

void SPI_Delay(unsigned char xrate){
 8001696:	b480      	push	{r7}
 8001698:	b085      	sub	sp, #20
 800169a:	af00      	add	r7, sp, #0
 800169c:	4603      	mov	r3, r0
 800169e:	71fb      	strb	r3, [r7, #7]
	unsigned char i;
	while(xrate){
 80016a0:	e00b      	b.n	80016ba <SPI_Delay+0x24>
		for(i=0;i<EPD_W21_SPI_SPEED;i++);
 80016a2:	2300      	movs	r3, #0
 80016a4:	73fb      	strb	r3, [r7, #15]
 80016a6:	e002      	b.n	80016ae <SPI_Delay+0x18>
 80016a8:	7bfb      	ldrb	r3, [r7, #15]
 80016aa:	3301      	adds	r3, #1
 80016ac:	73fb      	strb	r3, [r7, #15]
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d9f9      	bls.n	80016a8 <SPI_Delay+0x12>
		xrate--;
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	71fb      	strb	r3, [r7, #7]
	while(xrate){
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1f0      	bne.n	80016a2 <SPI_Delay+0xc>
	}
}
 80016c0:	bf00      	nop
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr
	...

080016cc <EPD_W21_WriteCMD>:
        EPD_W21_CLK_1; 
        SPI_Delay(1);
    }
}

void EPD_W21_WriteCMD(unsigned char command){
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
    SPI_Delay(1);
 80016d6:	2001      	movs	r0, #1
 80016d8:	f7ff ffdd 	bl	8001696 <SPI_Delay>
    EPD_W21_CS_0;                   
 80016dc:	2200      	movs	r2, #0
 80016de:	2101      	movs	r1, #1
 80016e0:	480c      	ldr	r0, [pc, #48]	; (8001714 <EPD_W21_WriteCMD+0x48>)
 80016e2:	f7ff f816 	bl	8000712 <HAL_GPIO_WritePin>
	EPD_W21_DC_0;		// command write
 80016e6:	2200      	movs	r2, #0
 80016e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016ec:	480a      	ldr	r0, [pc, #40]	; (8001718 <EPD_W21_WriteCMD+0x4c>)
 80016ee:	f7ff f810 	bl	8000712 <HAL_GPIO_WritePin>
	//SPI_Write(command);
	HAL_SPI_Transmit(&hspi1, &command, 1, HAL_MAX_DELAY);
 80016f2:	1df9      	adds	r1, r7, #7
 80016f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016f8:	2201      	movs	r2, #1
 80016fa:	4808      	ldr	r0, [pc, #32]	; (800171c <EPD_W21_WriteCMD+0x50>)
 80016fc:	f7ff fc6d 	bl	8000fda <HAL_SPI_Transmit>
	EPD_W21_CS_1;
 8001700:	2201      	movs	r2, #1
 8001702:	2101      	movs	r1, #1
 8001704:	4803      	ldr	r0, [pc, #12]	; (8001714 <EPD_W21_WriteCMD+0x48>)
 8001706:	f7ff f804 	bl	8000712 <HAL_GPIO_WritePin>
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40010800 	.word	0x40010800
 8001718:	40011000 	.word	0x40011000
 800171c:	20003b1c 	.word	0x20003b1c

08001720 <EPD_W21_WriteDATA>:

void EPD_W21_WriteDATA(unsigned char command){
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	71fb      	strb	r3, [r7, #7]
    SPI_Delay(1);
 800172a:	2001      	movs	r0, #1
 800172c:	f7ff ffb3 	bl	8001696 <SPI_Delay>
    EPD_W21_CS_0;                   
 8001730:	2200      	movs	r2, #0
 8001732:	2101      	movs	r1, #1
 8001734:	480c      	ldr	r0, [pc, #48]	; (8001768 <EPD_W21_WriteDATA+0x48>)
 8001736:	f7fe ffec 	bl	8000712 <HAL_GPIO_WritePin>
	EPD_W21_DC_1;		// data write
 800173a:	2201      	movs	r2, #1
 800173c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001740:	480a      	ldr	r0, [pc, #40]	; (800176c <EPD_W21_WriteDATA+0x4c>)
 8001742:	f7fe ffe6 	bl	8000712 <HAL_GPIO_WritePin>
	//SPI_Write(command);
	HAL_SPI_Transmit(&hspi1, &command, 1, HAL_MAX_DELAY);
 8001746:	1df9      	adds	r1, r7, #7
 8001748:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800174c:	2201      	movs	r2, #1
 800174e:	4808      	ldr	r0, [pc, #32]	; (8001770 <EPD_W21_WriteDATA+0x50>)
 8001750:	f7ff fc43 	bl	8000fda <HAL_SPI_Transmit>
	EPD_W21_CS_1;
 8001754:	2201      	movs	r2, #1
 8001756:	2101      	movs	r1, #1
 8001758:	4803      	ldr	r0, [pc, #12]	; (8001768 <EPD_W21_WriteDATA+0x48>)
 800175a:	f7fe ffda 	bl	8000712 <HAL_GPIO_WritePin>
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40010800 	.word	0x40010800
 800176c:	40011000 	.word	0x40011000
 8001770:	20003b1c 	.word	0x20003b1c

08001774 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	f5ad 6dc4 	sub.w	sp, sp, #1568	; 0x620
 800177a:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800177c:	f7fe fcf0 	bl	8000160 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001780:	f000 fa30 	bl	8001be4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001784:	f000 fad4 	bl	8001d30 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001788:	f000 fa68 	bl	8001c5c <MX_SPI1_Init>
  MX_SPI2_Init();
 800178c:	f000 fa9c 	bl	8001cc8 <MX_SPI2_Init>

  /* USER CODE BEGIN 2 */
  char message[500] = "";
 8001790:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	3304      	adds	r3, #4
 800179a:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 800179e:	2100      	movs	r1, #0
 80017a0:	4618      	mov	r0, r3
 80017a2:	f000 fd8a 	bl	80022ba <memset>

  int characterRowCounter = 0; //keeps track of which row to write pixles for.
 80017a6:	2300      	movs	r3, #0
 80017a8:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
  //Sometimes, it will increment when it's still rendering the same row of the character because the character is 2 bytes wide

  int stringIndex = 0; //keeps track of which character in the string we are at
 80017ac:	2300      	movs	r3, #0
 80017ae:	f8c7 3610 	str.w	r3, [r7, #1552]	; 0x610
  int asciiValueOfCharacter = 0; //this variables holds the ascii value of a character
 80017b2:	2300      	movs	r3, #0
 80017b4:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c

  int numberOfCharactersPerRow = 16; //how many characters in a row
 80017b8:	2310      	movs	r3, #16
 80017ba:	f8c7 35f8 	str.w	r3, [r7, #1528]	; 0x5f8

  int offsetFromASCII0 = 32; //offset from the actual ascii table.  A is ASCII 65, but the first letter in the array.
 80017be:	2320      	movs	r3, #32
 80017c0:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
  int characterHeight = 72;
 80017c4:	2348      	movs	r3, #72	; 0x48
 80017c6:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  //HAL_SPI_TransmitReceive(which spi, spi output, spi input, spi array size, maximum spi delay);
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)&output, (uint8_t*)&input, 300, HAL_MAX_DELAY);
 80017ca:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 80017ce:	f507 717b 	add.w	r1, r7, #1004	; 0x3ec
 80017d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80017dc:	4897      	ldr	r0, [pc, #604]	; (8001a3c <main+0x2c8>)
 80017de:	f7ff fd30 	bl	8001242 <HAL_SPI_TransmitReceive>
	//Input is in the input variable

	//this down here is to deal with an spi issue where it remains high for a few bytes. The first byte is always a small number
	int index = 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
	while(input[index] > 6){
 80017e8:	e004      	b.n	80017f4 <main+0x80>
		index++;
 80017ea:	f8d7 3604 	ldr.w	r3, [r7, #1540]	; 0x604
 80017ee:	3301      	adds	r3, #1
 80017f0:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
	while(input[index] > 6){
 80017f4:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 80017f8:	f8d7 3604 	ldr.w	r3, [r7, #1540]	; 0x604
 80017fc:	4413      	add	r3, r2
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b06      	cmp	r3, #6
 8001802:	d8f2      	bhi.n	80017ea <main+0x76>
	//this checks if the message is intended for this display by checking the device id in the packet.

	//THIS WILL CHANGE DEPENDING ON WHICH DISPLAY WE ARE PROGRAMMING------------------------------------------------------------------------------------------------------------------------------
	//THIS WILL CHANGE DEPENDING ON WHICH DISPLAY WE ARE PROGRAMMING------------------------------------------------------------------------------------------------------------------------------
	//THIS WILL CHANGE DEPENDING ON WHICH DISPLAY WE ARE PROGRAMMING------------------------------------------------------------------------------------------------------------------------------
	if((int)input[index] == 6){ //checks if message is for this display
 8001804:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 8001808:	f8d7 3604 	ldr.w	r3, [r7, #1540]	; 0x604
 800180c:	4413      	add	r3, r2
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b06      	cmp	r3, #6
 8001812:	d1da      	bne.n	80017ca <main+0x56>
		//this if statement checks if the input string is the same as the current message. If they are the same,
		//we don't do anything, if they are not, then we need to update the display again.
		if(strcmp(previousInput, input) == 0){ //the display remains the same because the input is the same as the current displayed image
 8001814:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 8001818:	1d3b      	adds	r3, r7, #4
 800181a:	4611      	mov	r1, r2
 800181c:	4618      	mov	r0, r3
 800181e:	f7fe fc95 	bl	800014c <strcmp>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d0d0      	beq.n	80017ca <main+0x56>
			//do nothing
		} else {
			memcpy(previousInput, input, sizeof(input));
 8001828:	1d3a      	adds	r2, r7, #4
 800182a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800182e:	4610      	mov	r0, r2
 8001830:	4619      	mov	r1, r3
 8001832:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001836:	461a      	mov	r2, r3
 8001838:	f000 fd34 	bl	80022a4 <memcpy>
		//start by getting the message for the display driver

			//this gets the date of the event
			date = input[index + 7];
 800183c:	f8d7 3604 	ldr.w	r3, [r7, #1540]	; 0x604
 8001840:	3307      	adds	r3, #7
 8001842:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 8001846:	5cd3      	ldrb	r3, [r2, r3]
 8001848:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
			int tens = date / 10;
 800184c:	f8d7 35ec 	ldr.w	r3, [r7, #1516]	; 0x5ec
 8001850:	4a7b      	ldr	r2, [pc, #492]	; (8001a40 <main+0x2cc>)
 8001852:	fb82 1203 	smull	r1, r2, r2, r3
 8001856:	1092      	asrs	r2, r2, #2
 8001858:	17db      	asrs	r3, r3, #31
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
			int ones = date - tens * 10;
 8001860:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 8001864:	f06f 0209 	mvn.w	r2, #9
 8001868:	fb02 f303 	mul.w	r3, r2, r3
 800186c:	f8d7 25ec 	ldr.w	r2, [r7, #1516]	; 0x5ec
 8001870:	4413      	add	r3, r2
 8001872:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4

			message[0] = tens + 48;
 8001876:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 800187a:	b2db      	uxtb	r3, r3
 800187c:	3330      	adds	r3, #48	; 0x30
 800187e:	b2da      	uxtb	r2, r3
 8001880:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8001884:	701a      	strb	r2, [r3, #0]
			message[1] = ones + 48;
 8001886:	f8d7 35e4 	ldr.w	r3, [r7, #1508]	; 0x5e4
 800188a:	b2db      	uxtb	r3, r3
 800188c:	3330      	adds	r3, #48	; 0x30
 800188e:	b2da      	uxtb	r2, r3
 8001890:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8001894:	705a      	strb	r2, [r3, #1]
			message[2] = ' ';
 8001896:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800189a:	2220      	movs	r2, #32
 800189c:	709a      	strb	r2, [r3, #2]

			int iOffset = 0; //this variable is to keep track of i getting off in the message index because there are some opperations where we don't want i to increment in the message array, but we do for the loop
 800189e:	2300      	movs	r3, #0
 80018a0:	f8c7 3600 	str.w	r3, [r7, #1536]	; 0x600
			//this sees how many events there are and writes the events to the display
			if(input[index + 1] == 0){ //when there are no events
 80018a4:	f8d7 3604 	ldr.w	r3, [r7, #1540]	; 0x604
 80018a8:	3301      	adds	r3, #1
 80018aa:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 80018ae:	5cd3      	ldrb	r3, [r2, r3]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d07c      	beq.n	80019ae <main+0x23a>
				// do nothing
			} else if(input[index + 1] == 1){ //what to do if there is one event.
 80018b4:	f8d7 3604 	ldr.w	r3, [r7, #1540]	; 0x604
 80018b8:	3301      	adds	r3, #1
 80018ba:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 80018be:	5cd3      	ldrb	r3, [r2, r3]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d130      	bne.n	8001926 <main+0x1b2>
				//set the for loop upper bound to 32
				for(i = 8; i < 40; i++){
 80018c4:	2308      	movs	r3, #8
 80018c6:	f8c7 3608 	str.w	r3, [r7, #1544]	; 0x608
 80018ca:	e027      	b.n	800191c <main+0x1a8>
					if(i == 8 || i == 9 || i == 10){
 80018cc:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 80018d0:	2b08      	cmp	r3, #8
 80018d2:	d007      	beq.n	80018e4 <main+0x170>
 80018d4:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 80018d8:	2b09      	cmp	r3, #9
 80018da:	d003      	beq.n	80018e4 <main+0x170>
 80018dc:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 80018e0:	2b0a      	cmp	r3, #10
 80018e2:	d105      	bne.n	80018f0 <main+0x17c>
						iOffset++; //we want to add to the offset because we don't want i to increment in message but we do in the loop.
 80018e4:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 80018e8:	3301      	adds	r3, #1
 80018ea:	f8c7 3600 	str.w	r3, [r7, #1536]	; 0x600
 80018ee:	e010      	b.n	8001912 <main+0x19e>
					} else {
						message[i - 5 - iOffset] = input[index + i]; //this adds the character in the event.
 80018f0:	f8d7 2604 	ldr.w	r2, [r7, #1540]	; 0x604
 80018f4:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 80018f8:	441a      	add	r2, r3
 80018fa:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 80018fe:	f8d7 1608 	ldr.w	r1, [r7, #1544]	; 0x608
 8001902:	1acb      	subs	r3, r1, r3
 8001904:	3b05      	subs	r3, #5
 8001906:	f507 71fc 	add.w	r1, r7, #504	; 0x1f8
 800190a:	5c89      	ldrb	r1, [r1, r2]
 800190c:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8001910:	54d1      	strb	r1, [r2, r3]
				for(i = 8; i < 40; i++){
 8001912:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 8001916:	3301      	adds	r3, #1
 8001918:	f8c7 3608 	str.w	r3, [r7, #1544]	; 0x608
 800191c:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 8001920:	2b27      	cmp	r3, #39	; 0x27
 8001922:	d9d3      	bls.n	80018cc <main+0x158>
 8001924:	e043      	b.n	80019ae <main+0x23a>
					}
				}
			} else if(input[index + 1] >= 2){ //what to do if there are two or more events.  It will only display 2 events.
 8001926:	f8d7 3604 	ldr.w	r3, [r7, #1540]	; 0x604
 800192a:	3301      	adds	r3, #1
 800192c:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 8001930:	5cd3      	ldrb	r3, [r2, r3]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d93b      	bls.n	80019ae <main+0x23a>
				//set the loop upper bound to
				for(i = 8; i < 72; i++){
 8001936:	2308      	movs	r3, #8
 8001938:	f8c7 3608 	str.w	r3, [r7, #1544]	; 0x608
 800193c:	e033      	b.n	80019a6 <main+0x232>
					if(i == 8 || i == 9 || i == 10 || i == 40 || i == 41 || i == 42){
 800193e:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 8001942:	2b08      	cmp	r3, #8
 8001944:	d013      	beq.n	800196e <main+0x1fa>
 8001946:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 800194a:	2b09      	cmp	r3, #9
 800194c:	d00f      	beq.n	800196e <main+0x1fa>
 800194e:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 8001952:	2b0a      	cmp	r3, #10
 8001954:	d00b      	beq.n	800196e <main+0x1fa>
 8001956:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 800195a:	2b28      	cmp	r3, #40	; 0x28
 800195c:	d007      	beq.n	800196e <main+0x1fa>
 800195e:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 8001962:	2b29      	cmp	r3, #41	; 0x29
 8001964:	d003      	beq.n	800196e <main+0x1fa>
 8001966:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 800196a:	2b2a      	cmp	r3, #42	; 0x2a
 800196c:	d105      	bne.n	800197a <main+0x206>
						iOffset++; //we want to add to the offset because we don't want i to increment in message but we do in the loop.
 800196e:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8001972:	3301      	adds	r3, #1
 8001974:	f8c7 3600 	str.w	r3, [r7, #1536]	; 0x600
 8001978:	e010      	b.n	800199c <main+0x228>
					} else {
						message[i - 5 - iOffset] = input[index + i]; //this adds the character in the event.
 800197a:	f8d7 2604 	ldr.w	r2, [r7, #1540]	; 0x604
 800197e:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 8001982:	441a      	add	r2, r3
 8001984:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8001988:	f8d7 1608 	ldr.w	r1, [r7, #1544]	; 0x608
 800198c:	1acb      	subs	r3, r1, r3
 800198e:	3b05      	subs	r3, #5
 8001990:	f507 71fc 	add.w	r1, r7, #504	; 0x1f8
 8001994:	5c89      	ldrb	r1, [r1, r2]
 8001996:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 800199a:	54d1      	strb	r1, [r2, r3]
				for(i = 8; i < 72; i++){
 800199c:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 80019a0:	3301      	adds	r3, #1
 80019a2:	f8c7 3608 	str.w	r3, [r7, #1544]	; 0x608
 80019a6:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 80019aa:	2b47      	cmp	r3, #71	; 0x47
 80019ac:	d9c7      	bls.n	800193e <main+0x1ca>
				}
			}


			//this fills in the rest of the message with spaces until the end
			for(int k = sizeof(message); k < 64; k++){
 80019ae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80019b2:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
 80019b6:	e00b      	b.n	80019d0 <main+0x25c>
				message[k] = 32;
 80019b8:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 80019bc:	f8d7 35fc 	ldr.w	r3, [r7, #1532]	; 0x5fc
 80019c0:	4413      	add	r3, r2
 80019c2:	2220      	movs	r2, #32
 80019c4:	701a      	strb	r2, [r3, #0]
			for(int k = sizeof(message); k < 64; k++){
 80019c6:	f8d7 35fc 	ldr.w	r3, [r7, #1532]	; 0x5fc
 80019ca:	3301      	adds	r3, #1
 80019cc:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
 80019d0:	f8d7 35fc 	ldr.w	r3, [r7, #1532]	; 0x5fc
 80019d4:	2b3f      	cmp	r3, #63	; 0x3f
 80019d6:	ddef      	ble.n	80019b8 <main+0x244>
			}

			//start the display driver

			//EPD_Clean
			EPD_init(); //EPD init
 80019d8:	f000 fa32 	bl	8001e40 <EPD_init>
			PIC_display_Clean_Big();//EPD_Clean
 80019dc:	f000 fabc 	bl	8001f58 <PIC_display_Clean_Big>
			EPD_refresh();//EPD_refresh
 80019e0:	f000 fa6c 	bl	8001ebc <EPD_refresh>
			EPD_sleep();//EPD_sleep
 80019e4:	f000 fa74 	bl	8001ed0 <EPD_sleep>

			//strcat(message, restOfMessage);


			for(i = 0; i < 15000; i++){
 80019e8:	2300      	movs	r3, #0
 80019ea:	f8c7 3608 	str.w	r3, [r7, #1544]	; 0x608
 80019ee:	e0d8      	b.n	8001ba2 <main+0x42e>
				if(i >= 7200 && i < 8200){
 80019f0:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 80019f4:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 80019f8:	d326      	bcc.n	8001a48 <main+0x2d4>
 80019fa:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 80019fe:	f242 0207 	movw	r2, #8199	; 0x2007
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d820      	bhi.n	8001a48 <main+0x2d4>
					if(7300 <= i && i < 7400){
 8001a06:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 8001a0a:	f641 4283 	movw	r2, #7299	; 0x1c83
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d90c      	bls.n	8001a2c <main+0x2b8>
 8001a12:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 8001a16:	f641 42e7 	movw	r2, #7399	; 0x1ce7
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d806      	bhi.n	8001a2c <main+0x2b8>
						frameBuffer[i] = 0b00000000;
 8001a1e:	4a09      	ldr	r2, [pc, #36]	; (8001a44 <main+0x2d0>)
 8001a20:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 8001a24:	4413      	add	r3, r2
 8001a26:	2200      	movs	r2, #0
 8001a28:	701a      	strb	r2, [r3, #0]
					if(7300 <= i && i < 7400){
 8001a2a:	e0b5      	b.n	8001b98 <main+0x424>
					} else {
						frameBuffer[i] = 0b11111111;
 8001a2c:	4a05      	ldr	r2, [pc, #20]	; (8001a44 <main+0x2d0>)
 8001a2e:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 8001a32:	4413      	add	r3, r2
 8001a34:	22ff      	movs	r2, #255	; 0xff
 8001a36:	701a      	strb	r2, [r3, #0]
					if(7300 <= i && i < 7400){
 8001a38:	e0ae      	b.n	8001b98 <main+0x424>
 8001a3a:	bf00      	nop
 8001a3c:	2000002c 	.word	0x2000002c
 8001a40:	66666667 	.word	0x66666667
 8001a44:	20000084 	.word	0x20000084
					}
				} else {
					asciiValueOfCharacter = message[stringIndex];
 8001a48:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8001a4c:	f8d7 3610 	ldr.w	r3, [r7, #1552]	; 0x610
 8001a50:	4413      	add	r3, r2
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c

					if(asciiValueOfCharacter == 0){
 8001a58:	f8d7 360c 	ldr.w	r3, [r7, #1548]	; 0x60c
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d106      	bne.n	8001a6e <main+0x2fa>
						asciiValueOfCharacter += offsetFromASCII0;
 8001a60:	f8d7 260c 	ldr.w	r2, [r7, #1548]	; 0x60c
 8001a64:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	; 0x5f4
 8001a68:	4413      	add	r3, r2
 8001a6a:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c
					}

					frameBuffer[i] = font[asciiValueOfCharacter - offsetFromASCII0][characterRowCounter * 3];
 8001a6e:	f8d7 260c 	ldr.w	r2, [r7, #1548]	; 0x60c
 8001a72:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	; 0x5f4
 8001a76:	1ad1      	subs	r1, r2, r3
 8001a78:	f8d7 2614 	ldr.w	r2, [r7, #1556]	; 0x614
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	4413      	add	r3, r2
 8001a82:	4855      	ldr	r0, [pc, #340]	; (8001bd8 <main+0x464>)
 8001a84:	22d8      	movs	r2, #216	; 0xd8
 8001a86:	fb02 f201 	mul.w	r2, r2, r1
 8001a8a:	4402      	add	r2, r0
 8001a8c:	4413      	add	r3, r2
 8001a8e:	7819      	ldrb	r1, [r3, #0]
 8001a90:	4a52      	ldr	r2, [pc, #328]	; (8001bdc <main+0x468>)
 8001a92:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 8001a96:	4413      	add	r3, r2
 8001a98:	460a      	mov	r2, r1
 8001a9a:	701a      	strb	r2, [r3, #0]
					i++;
 8001a9c:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	f8c7 3608 	str.w	r3, [r7, #1544]	; 0x608
					frameBuffer[i] = font[asciiValueOfCharacter - offsetFromASCII0][(characterRowCounter * 3) + 1];
 8001aa6:	f8d7 260c 	ldr.w	r2, [r7, #1548]	; 0x60c
 8001aaa:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	; 0x5f4
 8001aae:	1ad1      	subs	r1, r2, r3
 8001ab0:	f8d7 2614 	ldr.w	r2, [r7, #1556]	; 0x614
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	4413      	add	r3, r2
 8001aba:	3301      	adds	r3, #1
 8001abc:	4846      	ldr	r0, [pc, #280]	; (8001bd8 <main+0x464>)
 8001abe:	22d8      	movs	r2, #216	; 0xd8
 8001ac0:	fb02 f201 	mul.w	r2, r2, r1
 8001ac4:	4402      	add	r2, r0
 8001ac6:	4413      	add	r3, r2
 8001ac8:	7819      	ldrb	r1, [r3, #0]
 8001aca:	4a44      	ldr	r2, [pc, #272]	; (8001bdc <main+0x468>)
 8001acc:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 8001ad0:	4413      	add	r3, r2
 8001ad2:	460a      	mov	r2, r1
 8001ad4:	701a      	strb	r2, [r3, #0]
					i++;
 8001ad6:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 8001ada:	3301      	adds	r3, #1
 8001adc:	f8c7 3608 	str.w	r3, [r7, #1544]	; 0x608
					frameBuffer[i] = font[asciiValueOfCharacter - offsetFromASCII0][(characterRowCounter * 3) + 2];
 8001ae0:	f8d7 260c 	ldr.w	r2, [r7, #1548]	; 0x60c
 8001ae4:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	; 0x5f4
 8001ae8:	1ad1      	subs	r1, r2, r3
 8001aea:	f8d7 2614 	ldr.w	r2, [r7, #1556]	; 0x614
 8001aee:	4613      	mov	r3, r2
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	4413      	add	r3, r2
 8001af4:	3302      	adds	r3, #2
 8001af6:	4838      	ldr	r0, [pc, #224]	; (8001bd8 <main+0x464>)
 8001af8:	22d8      	movs	r2, #216	; 0xd8
 8001afa:	fb02 f201 	mul.w	r2, r2, r1
 8001afe:	4402      	add	r2, r0
 8001b00:	4413      	add	r3, r2
 8001b02:	7819      	ldrb	r1, [r3, #0]
 8001b04:	4a35      	ldr	r2, [pc, #212]	; (8001bdc <main+0x468>)
 8001b06:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 8001b0a:	4413      	add	r3, r2
 8001b0c:	460a      	mov	r2, r1
 8001b0e:	701a      	strb	r2, [r3, #0]


					stringIndex++; //moves to the next character
 8001b10:	f8d7 3610 	ldr.w	r3, [r7, #1552]	; 0x610
 8001b14:	3301      	adds	r3, #1
 8001b16:	f8c7 3610 	str.w	r3, [r7, #1552]	; 0x610


					if((stringIndex) % numberOfCharactersPerRow == 0){ //we are at the end of a row
 8001b1a:	f8d7 3610 	ldr.w	r3, [r7, #1552]	; 0x610
 8001b1e:	f8d7 25f8 	ldr.w	r2, [r7, #1528]	; 0x5f8
 8001b22:	fb93 f2f2 	sdiv	r2, r3, r2
 8001b26:	f8d7 15f8 	ldr.w	r1, [r7, #1528]	; 0x5f8
 8001b2a:	fb01 f202 	mul.w	r2, r1, r2
 8001b2e:	1a9b      	subs	r3, r3, r2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d121      	bne.n	8001b78 <main+0x404>
						stringIndex -= numberOfCharactersPerRow; //this goes to the beginning of the row again
 8001b34:	f8d7 2610 	ldr.w	r2, [r7, #1552]	; 0x610
 8001b38:	f8d7 35f8 	ldr.w	r3, [r7, #1528]	; 0x5f8
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	f8c7 3610 	str.w	r3, [r7, #1552]	; 0x610
						characterRowCounter++; //this goes to the next row
 8001b42:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 8001b46:	3301      	adds	r3, #1
 8001b48:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
						i++;
 8001b4c:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 8001b50:	3301      	adds	r3, #1
 8001b52:	f8c7 3608 	str.w	r3, [r7, #1544]	; 0x608
						frameBuffer[i] = 0b11111111;
 8001b56:	4a21      	ldr	r2, [pc, #132]	; (8001bdc <main+0x468>)
 8001b58:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 8001b5c:	4413      	add	r3, r2
 8001b5e:	22ff      	movs	r2, #255	; 0xff
 8001b60:	701a      	strb	r2, [r3, #0]
						i++;
 8001b62:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 8001b66:	3301      	adds	r3, #1
 8001b68:	f8c7 3608 	str.w	r3, [r7, #1544]	; 0x608
						frameBuffer[i] = 0b11111111;
 8001b6c:	4a1b      	ldr	r2, [pc, #108]	; (8001bdc <main+0x468>)
 8001b6e:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 8001b72:	4413      	add	r3, r2
 8001b74:	22ff      	movs	r2, #255	; 0xff
 8001b76:	701a      	strb	r2, [r3, #0]
					}

					if(characterRowCounter == characterHeight){ //an entire row of characters is finished rendering
 8001b78:	f8d7 2614 	ldr.w	r2, [r7, #1556]	; 0x614
 8001b7c:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d109      	bne.n	8001b98 <main+0x424>
						//start the next row
						stringIndex += numberOfCharactersPerRow;
 8001b84:	f8d7 2610 	ldr.w	r2, [r7, #1552]	; 0x610
 8001b88:	f8d7 35f8 	ldr.w	r3, [r7, #1528]	; 0x5f8
 8001b8c:	4413      	add	r3, r2
 8001b8e:	f8c7 3610 	str.w	r3, [r7, #1552]	; 0x610
						//fills in the last two spaces
						characterRowCounter = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
			for(i = 0; i < 15000; i++){
 8001b98:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	f8c7 3608 	str.w	r3, [r7, #1544]	; 0x608
 8001ba2:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 8001ba6:	f643 2297 	movw	r2, #14999	; 0x3a97
 8001baa:	4293      	cmp	r3, r2
 8001bac:	f67f af20 	bls.w	80019f0 <main+0x27c>
					}
				}
			}
			//this resets this variables to be used again
			characterRowCounter = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
			stringIndex = 0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	f8c7 3610 	str.w	r3, [r7, #1552]	; 0x610
			asciiValueOfCharacter = 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c

			/* USER CODE END WHILE */

			/* USER CODE BEGIN 3 */
			EPD_init(); //EPD init
 8001bc2:	f000 f93d 	bl	8001e40 <EPD_init>
			PIC_display(frameBuffer, redImage);//EPD_picture2
 8001bc6:	4906      	ldr	r1, [pc, #24]	; (8001be0 <main+0x46c>)
 8001bc8:	4804      	ldr	r0, [pc, #16]	; (8001bdc <main+0x468>)
 8001bca:	f000 f98e 	bl	8001eea <PIC_display>
			EPD_refresh();//EPD_refresh
 8001bce:	f000 f975 	bl	8001ebc <EPD_refresh>
			EPD_sleep();//EPD_sleep
 8001bd2:	f000 f97d 	bl	8001ed0 <EPD_sleep>
  {
 8001bd6:	e5f8      	b.n	80017ca <main+0x56>
 8001bd8:	08005d90 	.word	0x08005d90
 8001bdc:	20000084 	.word	0x20000084
 8001be0:	080022f8 	.word	0x080022f8

08001be4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b090      	sub	sp, #64	; 0x40
 8001be8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bea:	f107 0318 	add.w	r3, r7, #24
 8001bee:	2228      	movs	r2, #40	; 0x28
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f000 fb61 	bl	80022ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bf8:	1d3b      	adds	r3, r7, #4
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	605a      	str	r2, [r3, #4]
 8001c00:	609a      	str	r2, [r3, #8]
 8001c02:	60da      	str	r2, [r3, #12]
 8001c04:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c06:	2302      	movs	r3, #2
 8001c08:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c0e:	2310      	movs	r3, #16
 8001c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c12:	2300      	movs	r3, #0
 8001c14:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c16:	f107 0318 	add.w	r3, r7, #24
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7fe fd92 	bl	8000744 <HAL_RCC_OscConfig>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001c26:	f000 f9e3 	bl	8001ff0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c2a:	230f      	movs	r3, #15
 8001c2c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c36:	2300      	movs	r3, #0
 8001c38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001c3e:	1d3b      	adds	r3, r7, #4
 8001c40:	2100      	movs	r1, #0
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7fe fffe 	bl	8000c44 <HAL_RCC_ClockConfig>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001c4e:	f000 f9cf 	bl	8001ff0 <Error_Handler>
  }
}
 8001c52:	bf00      	nop
 8001c54:	3740      	adds	r7, #64	; 0x40
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
	...

08001c5c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c60:	4b17      	ldr	r3, [pc, #92]	; (8001cc0 <MX_SPI1_Init+0x64>)
 8001c62:	4a18      	ldr	r2, [pc, #96]	; (8001cc4 <MX_SPI1_Init+0x68>)
 8001c64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c66:	4b16      	ldr	r3, [pc, #88]	; (8001cc0 <MX_SPI1_Init+0x64>)
 8001c68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c6e:	4b14      	ldr	r3, [pc, #80]	; (8001cc0 <MX_SPI1_Init+0x64>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c74:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <MX_SPI1_Init+0x64>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c7a:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <MX_SPI1_Init+0x64>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c80:	4b0f      	ldr	r3, [pc, #60]	; (8001cc0 <MX_SPI1_Init+0x64>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c86:	4b0e      	ldr	r3, [pc, #56]	; (8001cc0 <MX_SPI1_Init+0x64>)
 8001c88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c8c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c8e:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <MX_SPI1_Init+0x64>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c94:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <MX_SPI1_Init+0x64>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c9a:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <MX_SPI1_Init+0x64>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ca0:	4b07      	ldr	r3, [pc, #28]	; (8001cc0 <MX_SPI1_Init+0x64>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001ca6:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <MX_SPI1_Init+0x64>)
 8001ca8:	220a      	movs	r2, #10
 8001caa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cac:	4804      	ldr	r0, [pc, #16]	; (8001cc0 <MX_SPI1_Init+0x64>)
 8001cae:	f7ff f933 	bl	8000f18 <HAL_SPI_Init>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001cb8:	f000 f99a 	bl	8001ff0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cbc:	bf00      	nop
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	20003b1c 	.word	0x20003b1c
 8001cc4:	40013000 	.word	0x40013000

08001cc8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001ccc:	4b16      	ldr	r3, [pc, #88]	; (8001d28 <MX_SPI2_Init+0x60>)
 8001cce:	4a17      	ldr	r2, [pc, #92]	; (8001d2c <MX_SPI2_Init+0x64>)
 8001cd0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8001cd2:	4b15      	ldr	r3, [pc, #84]	; (8001d28 <MX_SPI2_Init+0x60>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001cd8:	4b13      	ldr	r3, [pc, #76]	; (8001d28 <MX_SPI2_Init+0x60>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cde:	4b12      	ldr	r3, [pc, #72]	; (8001d28 <MX_SPI2_Init+0x60>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ce4:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <MX_SPI2_Init+0x60>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cea:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <MX_SPI2_Init+0x60>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8001cf0:	4b0d      	ldr	r3, [pc, #52]	; (8001d28 <MX_SPI2_Init+0x60>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cf6:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <MX_SPI2_Init+0x60>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cfc:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <MX_SPI2_Init+0x60>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d02:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <MX_SPI2_Init+0x60>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d08:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <MX_SPI2_Init+0x60>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001d0e:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <MX_SPI2_Init+0x60>)
 8001d10:	220a      	movs	r2, #10
 8001d12:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d14:	4804      	ldr	r0, [pc, #16]	; (8001d28 <MX_SPI2_Init+0x60>)
 8001d16:	f7ff f8ff 	bl	8000f18 <HAL_SPI_Init>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_SPI2_Init+0x5c>
  {
    Error_Handler();
 8001d20:	f000 f966 	bl	8001ff0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d24:	bf00      	nop
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	2000002c 	.word	0x2000002c
 8001d2c:	40003800 	.word	0x40003800

08001d30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b088      	sub	sp, #32
 8001d34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d36:	f107 0310 	add.w	r3, r7, #16
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]
 8001d40:	609a      	str	r2, [r3, #8]
 8001d42:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d44:	4b2e      	ldr	r3, [pc, #184]	; (8001e00 <MX_GPIO_Init+0xd0>)
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	4a2d      	ldr	r2, [pc, #180]	; (8001e00 <MX_GPIO_Init+0xd0>)
 8001d4a:	f043 0310 	orr.w	r3, r3, #16
 8001d4e:	6193      	str	r3, [r2, #24]
 8001d50:	4b2b      	ldr	r3, [pc, #172]	; (8001e00 <MX_GPIO_Init+0xd0>)
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	f003 0310 	and.w	r3, r3, #16
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5c:	4b28      	ldr	r3, [pc, #160]	; (8001e00 <MX_GPIO_Init+0xd0>)
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	4a27      	ldr	r2, [pc, #156]	; (8001e00 <MX_GPIO_Init+0xd0>)
 8001d62:	f043 0304 	orr.w	r3, r3, #4
 8001d66:	6193      	str	r3, [r2, #24]
 8001d68:	4b25      	ldr	r3, [pc, #148]	; (8001e00 <MX_GPIO_Init+0xd0>)
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	60bb      	str	r3, [r7, #8]
 8001d72:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d74:	4b22      	ldr	r3, [pc, #136]	; (8001e00 <MX_GPIO_Init+0xd0>)
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	4a21      	ldr	r2, [pc, #132]	; (8001e00 <MX_GPIO_Init+0xd0>)
 8001d7a:	f043 0308 	orr.w	r3, r3, #8
 8001d7e:	6193      	str	r3, [r2, #24]
 8001d80:	4b1f      	ldr	r3, [pc, #124]	; (8001e00 <MX_GPIO_Init+0xd0>)
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	f003 0308 	and.w	r3, r3, #8
 8001d88:	607b      	str	r3, [r7, #4]
 8001d8a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RES_Pin|DC_Pin, GPIO_PIN_RESET);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001d92:	481c      	ldr	r0, [pc, #112]	; (8001e04 <MX_GPIO_Init+0xd4>)
 8001d94:	f7fe fcbd 	bl	8000712 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	481a      	ldr	r0, [pc, #104]	; (8001e08 <MX_GPIO_Init+0xd8>)
 8001d9e:	f7fe fcb8 	bl	8000712 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUSY_Pin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 8001da2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001da6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dac:	2300      	movs	r3, #0
 8001dae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 8001db0:	f107 0310 	add.w	r3, r7, #16
 8001db4:	4619      	mov	r1, r3
 8001db6:	4813      	ldr	r0, [pc, #76]	; (8001e04 <MX_GPIO_Init+0xd4>)
 8001db8:	f7fe fb3a 	bl	8000430 <HAL_GPIO_Init>

  /*Configure GPIO pins : RES_Pin DC_Pin */
  GPIO_InitStruct.Pin = RES_Pin|DC_Pin;
 8001dbc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001dc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dce:	f107 0310 	add.w	r3, r7, #16
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	480b      	ldr	r0, [pc, #44]	; (8001e04 <MX_GPIO_Init+0xd4>)
 8001dd6:	f7fe fb2b 	bl	8000430 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dde:	2301      	movs	r3, #1
 8001de0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de6:	2302      	movs	r3, #2
 8001de8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001dea:	f107 0310 	add.w	r3, r7, #16
 8001dee:	4619      	mov	r1, r3
 8001df0:	4805      	ldr	r0, [pc, #20]	; (8001e08 <MX_GPIO_Init+0xd8>)
 8001df2:	f7fe fb1d 	bl	8000430 <HAL_GPIO_Init>

}
 8001df6:	bf00      	nop
 8001df8:	3720      	adds	r7, #32
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40021000 	.word	0x40021000
 8001e04:	40011000 	.word	0x40011000
 8001e08:	40010800 	.word	0x40010800

08001e0c <EPD_W21_Init>:

/* USER CODE BEGIN 4 */
void EPD_W21_Init(void){
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, 0);		// Module reset
 8001e10:	2200      	movs	r2, #0
 8001e12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e16:	4809      	ldr	r0, [pc, #36]	; (8001e3c <EPD_W21_Init+0x30>)
 8001e18:	f7fe fc7b 	bl	8000712 <HAL_GPIO_WritePin>
	//driver_delay_xms(1000);//At least 10ms delay
	HAL_Delay(1000);
 8001e1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e20:	f7fe fa00 	bl	8000224 <HAL_Delay>
	HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, 1);;
 8001e24:	2201      	movs	r2, #1
 8001e26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e2a:	4804      	ldr	r0, [pc, #16]	; (8001e3c <EPD_W21_Init+0x30>)
 8001e2c:	f7fe fc71 	bl	8000712 <HAL_GPIO_WritePin>
	//driver_delay_xms(1000);//At least 10ms delay
	HAL_Delay(1000);
 8001e30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e34:	f7fe f9f6 	bl	8000224 <HAL_Delay>
}
 8001e38:	bf00      	nop
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40011000 	.word	0x40011000

08001e40 <EPD_init>:

void EPD_init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
	  uint8_t HRES=0x80;						//128
 8001e46:	2380      	movs	r3, #128	; 0x80
 8001e48:	71fb      	strb	r3, [r7, #7]
	  uint8_t VRES_byte1=0x01;			//296
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	71bb      	strb	r3, [r7, #6]
	  uint8_t VRES_byte2=0x28;
 8001e4e:	2328      	movs	r3, #40	; 0x28
 8001e50:	717b      	strb	r3, [r7, #5]

		EPD_W21_Init();
 8001e52:	f7ff ffdb 	bl	8001e0c <EPD_W21_Init>

		EPD_W21_WriteCMD(0x06);         //boost soft start
 8001e56:	2006      	movs	r0, #6
 8001e58:	f7ff fc38 	bl	80016cc <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA (0x17);		//A
 8001e5c:	2017      	movs	r0, #23
 8001e5e:	f7ff fc5f 	bl	8001720 <EPD_W21_WriteDATA>
		EPD_W21_WriteDATA (0x17);		//B
 8001e62:	2017      	movs	r0, #23
 8001e64:	f7ff fc5c 	bl	8001720 <EPD_W21_WriteDATA>
		EPD_W21_WriteDATA (0x17);		//C
 8001e68:	2017      	movs	r0, #23
 8001e6a:	f7ff fc59 	bl	8001720 <EPD_W21_WriteDATA>

		EPD_W21_WriteCMD(0x04);
 8001e6e:	2004      	movs	r0, #4
 8001e70:	f7ff fc2c 	bl	80016cc <EPD_W21_WriteCMD>
		lcd_chkstatus();
 8001e74:	f000 f89a 	bl	8001fac <lcd_chkstatus>

		EPD_W21_WriteCMD(0x00);			//panel setting
 8001e78:	2000      	movs	r0, #0
 8001e7a:	f7ff fc27 	bl	80016cc <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA(0x0f);		//LUT from OTP��128x296
 8001e7e:	200f      	movs	r0, #15
 8001e80:	f7ff fc4e 	bl	8001720 <EPD_W21_WriteDATA>
	  EPD_W21_WriteDATA(0x0d);     //VCOM to 0V fast
 8001e84:	200d      	movs	r0, #13
 8001e86:	f7ff fc4b 	bl	8001720 <EPD_W21_WriteDATA>

		EPD_W21_WriteCMD(0x61);			//resolution setting
 8001e8a:	2061      	movs	r0, #97	; 0x61
 8001e8c:	f7ff fc1e 	bl	80016cc <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA (HRES);
 8001e90:	79fb      	ldrb	r3, [r7, #7]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff fc44 	bl	8001720 <EPD_W21_WriteDATA>
		EPD_W21_WriteDATA (VRES_byte1);
 8001e98:	79bb      	ldrb	r3, [r7, #6]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff fc40 	bl	8001720 <EPD_W21_WriteDATA>
		EPD_W21_WriteDATA (VRES_byte2);
 8001ea0:	797b      	ldrb	r3, [r7, #5]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff fc3c 	bl	8001720 <EPD_W21_WriteDATA>

		EPD_W21_WriteCMD(0X50);			//VCOM AND DATA INTERVAL SETTING
 8001ea8:	2050      	movs	r0, #80	; 0x50
 8001eaa:	f7ff fc0f 	bl	80016cc <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA(0x77);		//WBmode:VBDF 17|D7 VBDW 97 VBDB 57		WBRmode:VBDF F7 VBDW 77 VBDB 37  VBDR B7
 8001eae:	2077      	movs	r0, #119	; 0x77
 8001eb0:	f7ff fc36 	bl	8001720 <EPD_W21_WriteDATA>
}
 8001eb4:	bf00      	nop
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <EPD_refresh>:

void EPD_refresh(void){
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
	EPD_W21_WriteCMD(0x12);			//DISPLAY REFRESH
 8001ec0:	2012      	movs	r0, #18
 8001ec2:	f7ff fc03 	bl	80016cc <EPD_W21_WriteCMD>
	//driver_delay_xms(100);	        //!!!The delay here is necessary, 200uS at least!!!
	HAL_Delay(100);
 8001ec6:	2064      	movs	r0, #100	; 0x64
 8001ec8:	f7fe f9ac 	bl	8000224 <HAL_Delay>
	//lcd_chkstatus();                //waiting for the electronic paper IC to release the idle signal
}
 8001ecc:	bf00      	nop
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <EPD_sleep>:

void EPD_sleep(void){
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
	EPD_W21_WriteCMD(0X02);  	//power off
 8001ed4:	2002      	movs	r0, #2
 8001ed6:	f7ff fbf9 	bl	80016cc <EPD_W21_WriteCMD>
	EPD_W21_WriteCMD(0X07);  	//deep sleep
 8001eda:	2007      	movs	r0, #7
 8001edc:	f7ff fbf6 	bl	80016cc <EPD_W21_WriteCMD>
	EPD_W21_WriteDATA(0xA5);
 8001ee0:	20a5      	movs	r0, #165	; 0xa5
 8001ee2:	f7ff fc1d 	bl	8001720 <EPD_W21_WriteDATA>
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <PIC_display>:
	  picData_new++;
	}

}*/

void PIC_display(const unsigned char* picData_old,const unsigned char* picData_new){
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b084      	sub	sp, #16
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
 8001ef2:	6039      	str	r1, [r7, #0]
	unsigned int i;
	uint8_t value = 0;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	72fb      	strb	r3, [r7, #11]
	//black display
	EPD_W21_WriteCMD(0x10);	       //Transfer old data
 8001ef8:	2010      	movs	r0, #16
 8001efa:	f7ff fbe7 	bl	80016cc <EPD_W21_WriteCMD>
	for(i=0;i<15000;i++){
 8001efe:	2300      	movs	r3, #0
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	e00a      	b.n	8001f1a <PIC_display+0x30>
	  EPD_W21_WriteDATA(*picData_old);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff fc09 	bl	8001720 <EPD_W21_WriteDATA>
	  picData_old++;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	3301      	adds	r3, #1
 8001f12:	607b      	str	r3, [r7, #4]
	for(i=0;i<15000;i++){
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	3301      	adds	r3, #1
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f643 2297 	movw	r2, #14999	; 0x3a97
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d9ef      	bls.n	8001f04 <PIC_display+0x1a>
	}

	//red display
	EPD_W21_WriteCMD(0x13);		     //Transfer new data
 8001f24:	2013      	movs	r0, #19
 8001f26:	f7ff fbd1 	bl	80016cc <EPD_W21_WriteCMD>
	for(i=0;i<15000;i++)
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	e00a      	b.n	8001f46 <PIC_display+0x5c>
	{
	  EPD_W21_WriteDATA(*picData_new);
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff fbf3 	bl	8001720 <EPD_W21_WriteDATA>
	  picData_new++;
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	603b      	str	r3, [r7, #0]
	for(i=0;i<15000;i++)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	3301      	adds	r3, #1
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f643 2297 	movw	r2, #14999	; 0x3a97
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d9ef      	bls.n	8001f30 <PIC_display+0x46>
	}

}
 8001f50:	bf00      	nop
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <PIC_display_Clean_Big>:
	{
	  EPD_W21_WriteDATA(0xff);
	}
}

void PIC_display_Clean_Big(void){
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
    unsigned int i;
	EPD_W21_WriteCMD(0x10);	       //Transfer old data
 8001f5e:	2010      	movs	r0, #16
 8001f60:	f7ff fbb4 	bl	80016cc <EPD_W21_WriteCMD>
	for(i=0;i<15000;i++){
 8001f64:	2300      	movs	r3, #0
 8001f66:	607b      	str	r3, [r7, #4]
 8001f68:	e005      	b.n	8001f76 <PIC_display_Clean_Big+0x1e>
	  EPD_W21_WriteDATA(0xff);
 8001f6a:	20ff      	movs	r0, #255	; 0xff
 8001f6c:	f7ff fbd8 	bl	8001720 <EPD_W21_WriteDATA>
	for(i=0;i<15000;i++){
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3301      	adds	r3, #1
 8001f74:	607b      	str	r3, [r7, #4]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f643 2297 	movw	r2, #14999	; 0x3a97
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d9f4      	bls.n	8001f6a <PIC_display_Clean_Big+0x12>
	}

	EPD_W21_WriteCMD(0x13);		     //Transfer new data
 8001f80:	2013      	movs	r0, #19
 8001f82:	f7ff fba3 	bl	80016cc <EPD_W21_WriteCMD>
	for(i=0;i<15000;i++){
 8001f86:	2300      	movs	r3, #0
 8001f88:	607b      	str	r3, [r7, #4]
 8001f8a:	e005      	b.n	8001f98 <PIC_display_Clean_Big+0x40>
	  EPD_W21_WriteDATA(0xff);
 8001f8c:	20ff      	movs	r0, #255	; 0xff
 8001f8e:	f7ff fbc7 	bl	8001720 <EPD_W21_WriteDATA>
	for(i=0;i<15000;i++){
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	3301      	adds	r3, #1
 8001f96:	607b      	str	r3, [r7, #4]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f643 2297 	movw	r2, #14999	; 0x3a97
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d9f4      	bls.n	8001f8c <PIC_display_Clean_Big+0x34>
	}
}
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
	...

08001fac <lcd_chkstatus>:


void lcd_chkstatus(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
	unsigned char busy;
	do
	{
		EPD_W21_WriteCMD(0x71);
 8001fb2:	2071      	movs	r0, #113	; 0x71
 8001fb4:	f7ff fb8a 	bl	80016cc <EPD_W21_WriteCMD>
		busy = HAL_GPIO_ReadPin(BUSY_GPIO_Port, BUSY_Pin);
 8001fb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fbc:	480b      	ldr	r0, [pc, #44]	; (8001fec <lcd_chkstatus+0x40>)
 8001fbe:	f7fe fb91 	bl	80006e4 <HAL_GPIO_ReadPin>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	71fb      	strb	r3, [r7, #7]
		busy =!(busy & 0x01);
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	bf0c      	ite	eq
 8001fd0:	2301      	moveq	r3, #1
 8001fd2:	2300      	movne	r3, #0
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	71fb      	strb	r3, [r7, #7]
	}
	while(busy);
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1e9      	bne.n	8001fb2 <lcd_chkstatus+0x6>
	HAL_Delay(200);
 8001fde:	20c8      	movs	r0, #200	; 0xc8
 8001fe0:	f7fe f920 	bl	8000224 <HAL_Delay>
	//driver_delay_xms(200);
}
 8001fe4:	bf00      	nop
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40011000 	.word	0x40011000

08001ff0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr

08001ffc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002002:	4b15      	ldr	r3, [pc, #84]	; (8002058 <HAL_MspInit+0x5c>)
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	4a14      	ldr	r2, [pc, #80]	; (8002058 <HAL_MspInit+0x5c>)
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	6193      	str	r3, [r2, #24]
 800200e:	4b12      	ldr	r3, [pc, #72]	; (8002058 <HAL_MspInit+0x5c>)
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	60bb      	str	r3, [r7, #8]
 8002018:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800201a:	4b0f      	ldr	r3, [pc, #60]	; (8002058 <HAL_MspInit+0x5c>)
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	4a0e      	ldr	r2, [pc, #56]	; (8002058 <HAL_MspInit+0x5c>)
 8002020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002024:	61d3      	str	r3, [r2, #28]
 8002026:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <HAL_MspInit+0x5c>)
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202e:	607b      	str	r3, [r7, #4]
 8002030:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002032:	4b0a      	ldr	r3, [pc, #40]	; (800205c <HAL_MspInit+0x60>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	4a04      	ldr	r2, [pc, #16]	; (800205c <HAL_MspInit+0x60>)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800204e:	bf00      	nop
 8002050:	3714      	adds	r7, #20
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr
 8002058:	40021000 	.word	0x40021000
 800205c:	40010000 	.word	0x40010000

08002060 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b08a      	sub	sp, #40	; 0x28
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002068:	f107 0318 	add.w	r3, r7, #24
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a31      	ldr	r2, [pc, #196]	; (8002140 <HAL_SPI_MspInit+0xe0>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d124      	bne.n	80020ca <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002080:	4b30      	ldr	r3, [pc, #192]	; (8002144 <HAL_SPI_MspInit+0xe4>)
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	4a2f      	ldr	r2, [pc, #188]	; (8002144 <HAL_SPI_MspInit+0xe4>)
 8002086:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800208a:	6193      	str	r3, [r2, #24]
 800208c:	4b2d      	ldr	r3, [pc, #180]	; (8002144 <HAL_SPI_MspInit+0xe4>)
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002094:	617b      	str	r3, [r7, #20]
 8002096:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002098:	4b2a      	ldr	r3, [pc, #168]	; (8002144 <HAL_SPI_MspInit+0xe4>)
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	4a29      	ldr	r2, [pc, #164]	; (8002144 <HAL_SPI_MspInit+0xe4>)
 800209e:	f043 0304 	orr.w	r3, r3, #4
 80020a2:	6193      	str	r3, [r2, #24]
 80020a4:	4b27      	ldr	r3, [pc, #156]	; (8002144 <HAL_SPI_MspInit+0xe4>)
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	613b      	str	r3, [r7, #16]
 80020ae:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80020b0:	23a0      	movs	r3, #160	; 0xa0
 80020b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b4:	2302      	movs	r3, #2
 80020b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020b8:	2303      	movs	r3, #3
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020bc:	f107 0318 	add.w	r3, r7, #24
 80020c0:	4619      	mov	r1, r3
 80020c2:	4821      	ldr	r0, [pc, #132]	; (8002148 <HAL_SPI_MspInit+0xe8>)
 80020c4:	f7fe f9b4 	bl	8000430 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80020c8:	e036      	b.n	8002138 <HAL_SPI_MspInit+0xd8>
  else if(hspi->Instance==SPI2)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a1f      	ldr	r2, [pc, #124]	; (800214c <HAL_SPI_MspInit+0xec>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d131      	bne.n	8002138 <HAL_SPI_MspInit+0xd8>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020d4:	4b1b      	ldr	r3, [pc, #108]	; (8002144 <HAL_SPI_MspInit+0xe4>)
 80020d6:	69db      	ldr	r3, [r3, #28]
 80020d8:	4a1a      	ldr	r2, [pc, #104]	; (8002144 <HAL_SPI_MspInit+0xe4>)
 80020da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020de:	61d3      	str	r3, [r2, #28]
 80020e0:	4b18      	ldr	r3, [pc, #96]	; (8002144 <HAL_SPI_MspInit+0xe4>)
 80020e2:	69db      	ldr	r3, [r3, #28]
 80020e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ec:	4b15      	ldr	r3, [pc, #84]	; (8002144 <HAL_SPI_MspInit+0xe4>)
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	4a14      	ldr	r2, [pc, #80]	; (8002144 <HAL_SPI_MspInit+0xe4>)
 80020f2:	f043 0308 	orr.w	r3, r3, #8
 80020f6:	6193      	str	r3, [r2, #24]
 80020f8:	4b12      	ldr	r3, [pc, #72]	; (8002144 <HAL_SPI_MspInit+0xe4>)
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	f003 0308 	and.w	r3, r3, #8
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002104:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8002108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210e:	2300      	movs	r3, #0
 8002110:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002112:	f107 0318 	add.w	r3, r7, #24
 8002116:	4619      	mov	r1, r3
 8002118:	480d      	ldr	r0, [pc, #52]	; (8002150 <HAL_SPI_MspInit+0xf0>)
 800211a:	f7fe f989 	bl	8000430 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800211e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002122:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002124:	2302      	movs	r3, #2
 8002126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002128:	2303      	movs	r3, #3
 800212a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800212c:	f107 0318 	add.w	r3, r7, #24
 8002130:	4619      	mov	r1, r3
 8002132:	4807      	ldr	r0, [pc, #28]	; (8002150 <HAL_SPI_MspInit+0xf0>)
 8002134:	f7fe f97c 	bl	8000430 <HAL_GPIO_Init>
}
 8002138:	bf00      	nop
 800213a:	3728      	adds	r7, #40	; 0x28
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40013000 	.word	0x40013000
 8002144:	40021000 	.word	0x40021000
 8002148:	40010800 	.word	0x40010800
 800214c:	40003800 	.word	0x40003800
 8002150:	40010c00 	.word	0x40010c00

08002154 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr

08002160 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002164:	e7fe      	b.n	8002164 <HardFault_Handler+0x4>

08002166 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002166:	b480      	push	{r7}
 8002168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800216a:	e7fe      	b.n	800216a <MemManage_Handler+0x4>

0800216c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002170:	e7fe      	b.n	8002170 <BusFault_Handler+0x4>

08002172 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002172:	b480      	push	{r7}
 8002174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002176:	e7fe      	b.n	8002176 <UsageFault_Handler+0x4>

08002178 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr

08002184 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr

08002190 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002194:	bf00      	nop
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr

0800219c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021a0:	f7fe f824 	bl	80001ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021a4:	bf00      	nop
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80021ac:	4b15      	ldr	r3, [pc, #84]	; (8002204 <SystemInit+0x5c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a14      	ldr	r2, [pc, #80]	; (8002204 <SystemInit+0x5c>)
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80021b8:	4b12      	ldr	r3, [pc, #72]	; (8002204 <SystemInit+0x5c>)
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	4911      	ldr	r1, [pc, #68]	; (8002204 <SystemInit+0x5c>)
 80021be:	4b12      	ldr	r3, [pc, #72]	; (8002208 <SystemInit+0x60>)
 80021c0:	4013      	ands	r3, r2
 80021c2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80021c4:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <SystemInit+0x5c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a0e      	ldr	r2, [pc, #56]	; (8002204 <SystemInit+0x5c>)
 80021ca:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80021ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021d2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80021d4:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <SystemInit+0x5c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a0a      	ldr	r2, [pc, #40]	; (8002204 <SystemInit+0x5c>)
 80021da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021de:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80021e0:	4b08      	ldr	r3, [pc, #32]	; (8002204 <SystemInit+0x5c>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	4a07      	ldr	r2, [pc, #28]	; (8002204 <SystemInit+0x5c>)
 80021e6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80021ea:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80021ec:	4b05      	ldr	r3, [pc, #20]	; (8002204 <SystemInit+0x5c>)
 80021ee:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80021f2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80021f4:	4b05      	ldr	r3, [pc, #20]	; (800220c <SystemInit+0x64>)
 80021f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021fa:	609a      	str	r2, [r3, #8]
#endif 
}
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr
 8002204:	40021000 	.word	0x40021000
 8002208:	f8ff0000 	.word	0xf8ff0000
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002210:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002212:	e003      	b.n	800221c <LoopCopyDataInit>

08002214 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002214:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002216:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002218:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800221a:	3104      	adds	r1, #4

0800221c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800221c:	480a      	ldr	r0, [pc, #40]	; (8002248 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800221e:	4b0b      	ldr	r3, [pc, #44]	; (800224c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002220:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002222:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002224:	d3f6      	bcc.n	8002214 <CopyDataInit>
  ldr r2, =_sbss
 8002226:	4a0a      	ldr	r2, [pc, #40]	; (8002250 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002228:	e002      	b.n	8002230 <LoopFillZerobss>

0800222a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800222a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800222c:	f842 3b04 	str.w	r3, [r2], #4

08002230 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002230:	4b08      	ldr	r3, [pc, #32]	; (8002254 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002232:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002234:	d3f9      	bcc.n	800222a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002236:	f7ff ffb7 	bl	80021a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800223a:	f000 f80f 	bl	800225c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800223e:	f7ff fa99 	bl	8001774 <main>
  bx lr
 8002242:	4770      	bx	lr
  ldr r3, =_sidata
 8002244:	0800add0 	.word	0x0800add0
  ldr r0, =_sdata
 8002248:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800224c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8002250:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8002254:	20003b74 	.word	0x20003b74

08002258 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002258:	e7fe      	b.n	8002258 <ADC1_2_IRQHandler>
	...

0800225c <__libc_init_array>:
 800225c:	b570      	push	{r4, r5, r6, lr}
 800225e:	2500      	movs	r5, #0
 8002260:	4e0c      	ldr	r6, [pc, #48]	; (8002294 <__libc_init_array+0x38>)
 8002262:	4c0d      	ldr	r4, [pc, #52]	; (8002298 <__libc_init_array+0x3c>)
 8002264:	1ba4      	subs	r4, r4, r6
 8002266:	10a4      	asrs	r4, r4, #2
 8002268:	42a5      	cmp	r5, r4
 800226a:	d109      	bne.n	8002280 <__libc_init_array+0x24>
 800226c:	f000 f82e 	bl	80022cc <_init>
 8002270:	2500      	movs	r5, #0
 8002272:	4e0a      	ldr	r6, [pc, #40]	; (800229c <__libc_init_array+0x40>)
 8002274:	4c0a      	ldr	r4, [pc, #40]	; (80022a0 <__libc_init_array+0x44>)
 8002276:	1ba4      	subs	r4, r4, r6
 8002278:	10a4      	asrs	r4, r4, #2
 800227a:	42a5      	cmp	r5, r4
 800227c:	d105      	bne.n	800228a <__libc_init_array+0x2e>
 800227e:	bd70      	pop	{r4, r5, r6, pc}
 8002280:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002284:	4798      	blx	r3
 8002286:	3501      	adds	r5, #1
 8002288:	e7ee      	b.n	8002268 <__libc_init_array+0xc>
 800228a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800228e:	4798      	blx	r3
 8002290:	3501      	adds	r5, #1
 8002292:	e7f2      	b.n	800227a <__libc_init_array+0x1e>
 8002294:	0800adc8 	.word	0x0800adc8
 8002298:	0800adc8 	.word	0x0800adc8
 800229c:	0800adc8 	.word	0x0800adc8
 80022a0:	0800adcc 	.word	0x0800adcc

080022a4 <memcpy>:
 80022a4:	b510      	push	{r4, lr}
 80022a6:	1e43      	subs	r3, r0, #1
 80022a8:	440a      	add	r2, r1
 80022aa:	4291      	cmp	r1, r2
 80022ac:	d100      	bne.n	80022b0 <memcpy+0xc>
 80022ae:	bd10      	pop	{r4, pc}
 80022b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80022b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80022b8:	e7f7      	b.n	80022aa <memcpy+0x6>

080022ba <memset>:
 80022ba:	4603      	mov	r3, r0
 80022bc:	4402      	add	r2, r0
 80022be:	4293      	cmp	r3, r2
 80022c0:	d100      	bne.n	80022c4 <memset+0xa>
 80022c2:	4770      	bx	lr
 80022c4:	f803 1b01 	strb.w	r1, [r3], #1
 80022c8:	e7f9      	b.n	80022be <memset+0x4>
	...

080022cc <_init>:
 80022cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ce:	bf00      	nop
 80022d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022d2:	bc08      	pop	{r3}
 80022d4:	469e      	mov	lr, r3
 80022d6:	4770      	bx	lr

080022d8 <_fini>:
 80022d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022da:	bf00      	nop
 80022dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022de:	bc08      	pop	{r3}
 80022e0:	469e      	mov	lr, r3
 80022e2:	4770      	bx	lr
